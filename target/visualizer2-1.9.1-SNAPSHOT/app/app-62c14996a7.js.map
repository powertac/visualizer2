{"version":3,"sources":["app/app.module.js","app/services/user/user.service.js","app/services/state.service.js","app/services/push.service.js","app/services/profiles/profile.service.js","app/services/profiles/page-ribbon.directive.js","app/services/auth/sessions.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password.service.js","app/services/auth/has-authority.directive.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.session.service.js","app/services/auth/auth.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/error/error.state.js","app/home/home.state.js","app/home/home.controller.js","app/graphs/graphs.state.js","app/graphs/graphs.controller.js","app/games/games-filepicker-dialog.controller.js","app/games/games.state.js","app/games/games.service.js","app/games/games.controller.js","app/files/files.state.js","app/files/files.service.js","app/files/files.controller.js","app/entities/view/view-dialog.controller.js","app/entities/view/view-detail.controller.js","app/entities/view/view-delete-dialog.controller.js","app/entities/view/view.state.js","app/entities/view/view.service.js","app/entities/view/view.controller.js","app/entities/graph/graph-dialog.controller.js","app/entities/graph/graph-detail.controller.js","app/entities/graph/graph-delete-dialog.controller.js","app/entities/graph/graph.state.js","app/entities/graph/graph.service.js","app/entities/graph/graph.controller.js","app/entities/game/game-dialog.controller.js","app/entities/game/game-detail.controller.js","app/entities/game/game-delete-dialog.controller.js","app/entities/game/game.state.js","app/entities/game/game.service.js","app/entities/game/game.controller.js","app/entities/file/file-dialog.controller.js","app/entities/file/file-detail.controller.js","app/entities/file/file-delete-dialog.controller.js","app/entities/file/file.state.js","app/entities/file/file.service.js","app/entities/file/file.controller.js","app/entities/entity.state.js","app/entities/chart/chart-dialog.controller.js","app/entities/chart/chart-detail.controller.js","app/entities/chart/chart-delete-dialog.controller.js","app/entities/chart/chart.state.js","app/entities/chart/chart.service.js","app/entities/chart/chart.controller.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort-by.directive.js","app/components/util/sort.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert-error.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/state.handler.js","app/blocks/config/uib-pagination.config.js","app/blocks/config/uib-pager.config.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/app.state.js","app/app.constants.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/tracker/tracker.state.js","app/admin/tracker/tracker.service.js","app/admin/tracker/tracker.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/admin/admin.state.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/sessions/sessions.state.js","app/account/sessions/sessions.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password-strength-bar.directive.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/account/account.state.js","app/app.js"],"names":["run","stateHandler","initialize","angular","module","$inject","User","$resource","query","method","isArray","get","transformResponse","data","fromJson","save","update","delete","factory","State","$rootScope","Push","service","this","initGraphData","keys","Object","reduce","map","key","initRetail","retail","sub","kwh","m","actTx","rvkTx","pubTx","setStatus","status","gameStatus","gameStatusStyle","processSnapshot","snapshot","timeSlot","timeInstance","Date","timeInstances","push","timeString","Highcharts","dateFormat","tickValueBrokers","forEach","brokerTick","broker","brokers","id","wholesale","cash","hasOwnProperty","graphData","allMoneyCumulative","retailSubscription","retailSubscriptionCumulative","rkwh","retailKwh","retailKwhCumulative","rm","retailMoney","retailMoneyCumulative","wmwh","mwh","wholesaleMwh","wholesaleMwhCumulative","wm","wholesaleMoney","wholesaleMoneyCumulative","p","NaN","isNaN","wholesalePrice","pb","wholesalePriceBuy","ps","wholesalePriceSell","processBrokerTick","aggCustomers","customer","lastIndex","length","prepareCustomer","missing","customers","tickValueCustomers","customerTick","processCustomerTick","changed","processBrokers","initWholesale","allGraphKeys","enabled","processCustomers","powerTypes","powerTypeMap","powerType","powerIndex","indexOf","genericPowerType","ids","customerClass","population","retailGraphKeys","aggCustomer","gameName","time","queue","prevStatus","wholesaleGraphKeys","receive","then","obj","handlePushMessage","message","type","localeCompare","game","state","competition","snapshots","$broadcast","console","log","onConnectionChanged","connected","clientId","Math","round","random","Number","MAX_SAFE_INTEGER","toString","$http","$cookies","$q","$timeout","$log","DEBUG_INFO_ENABLED","listener","promise","callback","connectionChanged","loc","window","location","host","pathname","endsWith","substring","SOCKET_URL","TOPIC","RECONNECT_TIMEOUT_START","RECONNECT_TIMEOUT_LIMIT","delay","offset","ceil","defer","socket","client","stomp","success","subscribe","notify","JSON","parse","getMessage","body","failure","error","debug","min","headers","defaults","xsrfHeaderName","xsrfCookieName","SockJS","Stomp","over","connect","ProfileService","dataPromise","getProfileInfo","isUndefined","result","activeProfiles","response","ribbonEnv","inProduction","swaggerEnabled","pageRibbon","replace","restrict","template","link","scope","element","attrs","addClass","removeClass","directive","Sessions","getAll","Register","Principal","Account","JhiTrackerService","_identity","_authenticated","authenticate","identity","hasAnyAuthority","authorities","i","hasAuthority","authority","_id","when","force","deferred","undefined","isDefined","resolve","$promise","account","catch","isAuthenticated","isIdentityResolved","Password","setVisible","defineVisibility","reset","$watch","split","AuthServerProvider","$localStorage","getToken","authenticationToken","hasValidToken","login","credentials","encodeURIComponent","username","password","rememberMe","post","Content-Type","logout","disconnect","Auth","$state","$sessionStorage","LoginService","Activate","activateAccount","cb","noop","err","bind","authorize","toState","parent","name","go","fromState","getPreviousState","previousState","resetPreviousState","params","storePreviousState","toStateParams","open","changePassword","newPassword","createAccount","sendActivity","reject","updateAccount","previousStateName","previousStateParams","interceptor","NavbarController","vm","collapseNavbar","isNavbarCollapsed","toggleNavbar","controller","stateConfig","$stateProvider","url","pageTitle","views","content@","templateUrl","config","controllerAs","HomeController","$scope","getAccount","register","$on","GraphsController","changeDetection","tab","graphs","colors","symbolMap","circle","square","diamond","triangle","triangle-down","symbols","chartConfig","chart","animation","zoomType","rangeSelector","navigator","adaptToUpdatedData","series","lineWidth","height","title","text","tooltip","useHTML","shared","formatter","head","x","rows","points","point","symbol","value","y","toFixed","color","sort","a","b","join","plotOptions","states","hover","chartType","credits","initCharts","copy","startsWith","same","simulationBaseTime","duration","timeslotDuration","start","bootstrapTimeslotCount","bootstrapDiscardedTimeslots","index","extend","marker","radius","visible","pointStart","pointInterval","toggleBroker","some","GamesFilePickerController","$uibModalInstance","fileType","Files","Games","selected","itemsPerPage","filesCollection","refresh","cancel","dismiss","submit","select","row","selectTime","now","close","onEnter","$stateParams","$uibModal","size","file","httpOpts","list","boot","overwrite","replayInternal","replayExternal","bootFile","stateFile","seedFile","configFile","weatherFile","GamesController","AlertService","setMode","mode","gameNameTemp","brokerNames","brokerCollection","games","setSource","source","replaySource","replayUrl","replayUrlTemp","replayGame","setGameName","addBroker","brokerName","removeBroker","getFile","clearFile","setReplayUrl","completed","startBoot","startSim","stop","isStartButtonDisabled","isGameValid","isStopButtonDisabled","upload","transformRequest","fd","FormData","FileList","append","FilesController","$window","File","refreshFiles","resetUpload","uploadFile","uploadShared","uploadOverwrite","uploadType","doUpload","statusText","doDownload","toLowerCase","doDelete","ViewDialogController","entity","View","Chart","onSaveSuccess","$emit","isSaving","onSaveError","view","clear","users","charts","focus","ViewDetailController","unsubscribe","event","ViewDeleteController","confirmDelete","page","squash","search","pagingParams","PaginationUtil","parsePage","predicate","parsePredicate","ascending","parseAscending","current","href","backdrop","reload","ViewController","ParseLinks","paginationConstants","loadPage","transition","reverse","transitionTo","$current","currentSearch","links","totalItems","queryCount","GraphDialogController","Graph","graph","GraphDetailController","GraphDeleteController","GraphController","GameDialogController","Game","datePickerOpenStatus","openCalendar","date","files","GameDetailController","GameDeleteController","DateUtils","convertDateTimeFromServer","GameController","FileDialogController","FileDetailController","FileDeleteController","FileController","abstract","ChartDialogController","ChartDetailController","ChartDeleteController","ChartController","filter","input","words","inputWords","slice","chars","breakOnWord","charAt","substr","lastspace","lastIndexOf","require","parentCtrl","jhSortBy","SortController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","bindToController","header","Error","parts","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","parseInt","sortArray","pop","component","bindings","$filter","convertLocalDateFromServer","dateString","convertLocalDateToServer","dateformat","DataUtils","abbreviate","byteSize","base64String","suffix","str","formatAsBytes","paddingSize","openFile","toBase64","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","toUpperCase","keyStr","decode","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","String","fromCharCode","encode","charCodeAt","modalInstance","resetModal","LoginController","authenticationError","preventDefault","requestResetPassword","formCtrl","each","$formGroup","$inputs","inputName","attr","$invalid","$dirty","isInvalid","toggleClass","constant","ngModel","$validators","minbytes","modelValue","$isEmpty","numberOfBytes","maxbytes","jhiAlertError","jhiAlertErrorController","addErrorAlert","alerts","msg","timeout","toast","isToast","scoped","cleanHttpErrorListener","httpResponse","stopPropagation","errorHeader","fieldErrors","fieldError","convertedField","toJson","provider","getService","$sce","alertId","alertOptions","alert","trustAsHtml","position","closeAlert","extAlerts","that","closeAlertByIndex","info","warning","thisAlerts","splice","$get","showAsToast","jhiAlert","jhiAlertController","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","path","authExpiredInterceptor","$injector","to","VERSION","CONFIG","stateChangeStart","external","stateChangeSuccess","toParams","fromParams","titleKey","document","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","setMatchlist","otherwise","interceptors","val","equals","is","pattern","compileServiceConfig","$compileProvider","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","navbar@","UserManagementDialogController","languages","user","langKey","UserManagementDetailController","load","UserManagementDeleteController","firstName","lastName","email","activated","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","onSuccess","onError","currentAccount","loadAll","setActive","isActivated","onExit","stompClient","subscriber","alreadyConnectedOnce","send","JhiTrackerController","activities","activity","existingActivity","sessionId","showActivity","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","cachesStats","metrics","updatingMetrics","refreshThreadDumpData","servicesStats","newValue","timers","gauges","newKey","JhiHealthService","separator","checkHealth","transformHealthData","flattenHealthData","isHealthObject","hasSubSystem","addHealthObject","getModuleName","getBaseName","getSubSystemName","remainder","isLeaf","healthObject","healthData","details","hasDetails","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","updatingHealth","statusState","showHealth","health","JhiConfigurationService","properties","orderBy","getEnv","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","audits","onChangeDate","previousMonth","getMonth","getFullYear","getDate","today","SettingsController","settingsAccount","copyAccount","SessionsController","invalidate","sessions","RegisterController","doNotMatch","errorUserExists","registerAccount","confirmPassword","errorEmailExists","passwordToCheck","iElement","strength","mesureStrength","_force","_flags","test","_passedMatches","$","grep","el","getColor","s","idx","col","c","children","css","background-color","PasswordController","ActivationController","$templateCache","put"],"mappings":"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","file":"app-62c14996a7.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ngSanitize',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            'bootstrap.fileField',\n            'smart-table',\n            'highcharts-ng',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function () {\n\n    angular\n        .module('visualizer2App')\n        .service('State', State);\n\n    State.$inject = ['$rootScope', 'Push'];\n\n    function State ($rootScope, Push) {\n        var service = this;\n\n        service.brokers = [];\n        service.customers = [];\n        service.aggCustomers = [];\n        service.timeInstances = [];\n        service.gameName = '';\n        service.time = '';\n        service.timeSlot = '';\n        service.timeInstance = '';\n        service.queue = [];\n        service.gameStatus = '';\n        service.prevStatus = '';\n        service.gameStatusStyle = 'default';\n\n        service.retailGraphKeys = {\n            'retailMoney': {},\n            'retailMoneyCumulative': {},\n            'retailKwh': {},\n            'retailKwhCumulative': {},\n            'retailSubscription': {},\n            'retailSubscriptionCumulative': {}\n        };\n\n        service.wholesaleGraphKeys = {\n            'wholesaleMoney': {},\n            'wholesaleMoneyCumulative': {},\n            'wholesaleMwh': {},\n            'wholesaleMwhCumulative': {},\n            'wholesalePrice': {},\n            'wholesalePriceBuy': {},\n            'wholesalePriceSell': {},\n        };\n\n        service.allGraphKeys = {\n            'allMoneyCumulative': {},\n        };\n        Object.keys(service.retailGraphKeys).forEach(function(key) {\n            service.allGraphKeys[key] = service.retailGraphKeys[key];\n        });\n        Object.keys(service.wholesaleGraphKeys).forEach(function(key) {\n            service.allGraphKeys[key] = service.wholesaleGraphKeys[key];\n        });\n\n        service.changed = Object.keys(service.allGraphKeys).reduce(function(map, key) {\n            map[key] = false;\n            return map;\n        }, {});\n\n        Push.receive().then(null, null, function (obj) {\n            handlePushMessage(obj);\n        });\n\n        Push.onConnectionChanged(setConnected);\n\n        function initGraphData (keys) {\n            return Object.keys(keys).reduce(function(map, key) {\n                map[key] = [];\n                return map;\n            }, {});\n        }\n\n        function initRetail (retail) {\n            retail.sub = 0;\n            retail.kwh = 0;\n            retail.m = 0;\n            retail.actTx = 0;\n            retail.rvkTx = 0;\n            retail.pubTx = 0;\n            return retail;\n        }\n\n        function initWholesale (wholesale) {\n            wholesale.mwh = 0;\n            wholesale.m = 0;\n            wholesale.p = NaN;\n            wholesale.pb = NaN;\n            wholesale.ps = NaN;\n            return wholesale;\n        }\n\n        function aggCustomer (powerType) {\n            return {\n                'genericPowerType': '',\n                'powerType': powerType,\n                // here we will keep id for each concrete customer so we can\n                // find the powerTypeCustomer\n                'ids': [],\n                'customerClass': [],\n                'population': 0,\n                'retail': initRetail({}),\n                'graphData': initGraphData(service.retailGraphKeys)\n            };\n        }\n\n        function setConnected(connected) {\n            if (connected) {\n                setStatus(service.prevStatus);\n            } else {\n                service.prevStatus = service.gameStatus;\n                setStatus('OFFLINE');\n            }\n        }\n\n        function setStatus (status) {\n            service.gameStatus = status;\n\n            if (status === 'RUNNING') {\n                service.gameStatusStyle = 'success';\n            } else if (status === 'WAITING') {\n                service.gameStatusStyle = 'info';\n            } else if (status === 'FINISHED') {\n                service.gameStatusStyle = 'warning';\n            } else if (status === 'IDLE') {\n                service.gameStatusStyle = 'default';\n            } else {\n                service.gameStatusStyle = 'danger'; // unexpected\n            }\n        }\n\n        function processCompetition (competition) {\n            service.competition = competition;\n        }\n\n        function processSnapshot (snapshot) {\n            service.timeSlot = snapshot.timeSlot;\n            service.timeInstance = new Date(snapshot.timeInstance);\n            service.timeInstances.push(service.timeInstance);\n            service.timeString = '#' + service.timeSlot + ' | ' + Highcharts.dateFormat('%e %b %Y %H:%M', service.timeInstance) + ' UTC';\n\n            // process broker ticks:\n            snapshot.tickValueBrokers.forEach(function (brokerTick) {\n                processBrokerTick(brokerTick);\n            });\n\n            // prepare customer for a tick:\n            service.aggCustomers.forEach(function (customer) {\n                prepareCustomer(customer);\n            });\n\n            // process customer ticks:\n            missing = Object.keys(service.customers).reduce(function(missing, id) {\n                missing[id] = true;\n                return missing;\n            }, {});\n            snapshot.tickValueCustomers.forEach(function (customerTick) {\n                missing[customerTick.id] = false;\n                processCustomerTick(customerTick);\n            });\n            Object.keys(missing).forEach(function(id) {\n                if (missing[id]) {\n                    processCustomerTick({\n                        id: id\n                    });\n                }\n            });\n\n            // mark as dirty\n            Object.keys(service.changed).forEach(function(key) {\n                service.changed[key] = true;\n            });\n        };\n\n        function processBrokers (brokers) {\n            service.brokers = [];\n\n            brokers.forEach(function (broker) {\n                // make a properties if they do not exist (back-end will not\n                // send a property unless it has a value.)\n                broker.cash = 0;\n                broker.retail = initRetail(broker.retail);\n                broker.wholesale = initWholesale(broker.wholesale);\n\n                // add some arrays for graphs:\n                broker.graphData = initGraphData(service.allGraphKeys);\n\n                // begin with every broker enabled / checked\n                broker.enabled = true;\n\n                // add to service.brokers collection:\n                service.brokers[broker.id] = broker;\n            });\n        }\n\n        function processBrokerTick (brokerTick) {\n            var broker = service.brokers[brokerTick.id];\n            var retail = brokerTick.retail;\n            var wholesale = brokerTick.wholesale;\n\n            var cash = brokerTick.hasOwnProperty('cash') ? brokerTick.cash : 0;\n            broker.cash = cash;\n            broker.graphData.allMoneyCumulative.push(cash);\n\n            var sub = retail && retail.hasOwnProperty('sub') ? retail.sub : 0;\n            broker.retail.sub += sub;\n            broker.graphData.retailSubscription.push(sub);\n            broker.graphData.retailSubscriptionCumulative.push(broker.retail.sub);\n\n            var rkwh = retail && retail.hasOwnProperty('kwh') ? retail.kwh : 0;\n            broker.retail.kwh += rkwh;\n            broker.graphData.retailKwh.push(rkwh);\n            broker.graphData.retailKwhCumulative.push(broker.retail.kwh);\n\n            var rm = retail && retail.hasOwnProperty('m') ? retail.m : 0;\n            broker.retail.m += rm;\n            broker.graphData.retailMoney.push(rm);\n            broker.graphData.retailMoneyCumulative.push(broker.retail.m);\n\n            var wmwh = wholesale && wholesale.hasOwnProperty('mwh') ? wholesale.mwh : 0;\n            broker.wholesale.mwh += wmwh;\n            broker.graphData.wholesaleMwh.push(wmwh);\n            broker.graphData.wholesaleMwhCumulative.push(broker.wholesale.mwh);\n\n            var wm = wholesale && wholesale.hasOwnProperty('m') ? wholesale.m : 0;\n            broker.wholesale.m += wm;\n            broker.graphData.wholesaleMoney.push(wm);\n            broker.graphData.wholesaleMoneyCumulative.push(broker.wholesale.m);\n\n            var p = wholesale && wholesale.hasOwnProperty('p') ? wholesale.p : NaN;\n            broker.wholesale.p = isNaN(p) ? null : p;\n            broker.graphData.wholesalePrice.push(broker.wholesale.p);\n\n            var pb = wholesale && wholesale.hasOwnProperty('pb') ? wholesale.pb : NaN;\n            broker.wholesale.pb = isNaN(pb) ? null : pb;\n            broker.graphData.wholesalePriceBuy.push(broker.wholesale.pb);\n\n            var ps = wholesale && wholesale.hasOwnProperty('ps') ? wholesale.ps : NaN;\n            broker.wholesale.ps = isNaN(ps) ? null : ps;\n            broker.graphData.wholesalePriceSell.push(broker.wholesale.ps);\n\n            if (retail && retail.hasOwnProperty('actTx')) {\n                broker.retail.actTx += retail.actTx;\n            }\n            if (retail && retail.hasOwnProperty('rvkTx')) {\n                broker.retail.rvkTx += retail.rvkTx;\n            }\n            if (retail && retail.hasOwnProperty('pubTx')) {\n                broker.retail.pubTx += retail.pubTx;\n            }\n        }\n\n        function processCustomers (customers) {\n            // These are tightly coupled\n            service.aggCustomers = [];\n            service.powerTypes = [];\n            // Map customer.id to powerType (not available in the tick)\n            service.powerTypeMap = {};\n\n            // TODO optimize data structures\n            customers.forEach(function (customer) {\n                var powerType = customer.powerType;\n                var powerIndex = service.powerTypes.indexOf(powerType);\n                if (powerIndex === -1) {\n                    service.powerTypes.push(powerType);\n                    service.aggCustomers.push(aggCustomer(powerType));\n                    powerIndex = service.powerTypes.length - 1;\n                }\n\n                service.powerTypeMap[customer.id] = powerIndex;\n\n                // TODO This isn't right, why are generic and class overwritten?\n                // customerClass not used yet\n                service.aggCustomers[powerIndex].genericPowerType = customer.genericPowerType;\n                service.aggCustomers[powerIndex].ids.push(customer.id);\n                service.aggCustomers[powerIndex].customerClass = customer.customerClass;\n                service.aggCustomers[powerIndex].population += customer.population;\n\n                customer.retail = initRetail(customer.retail);\n                service.customers[customer.id] = customer;\n            });\n        }\n\n        function prepareCustomer (customer) {\n            var lastIndex = customer.graphData.retailSubscription.length - 1;\n            customer.graphData.retailSubscription.push(0);\n            customer.graphData.retailSubscriptionCumulative.push(\n                customer.graphData.retailSubscriptionCumulative[lastIndex]);\n\n            customer.graphData.retailKwh.push(0);\n            customer.graphData.retailKwhCumulative.push(\n                customer.graphData.retailKwhCumulative[lastIndex]);\n\n            customer.graphData.retailMoney.push(0);\n            customer.graphData.retailMoneyCumulative.push(\n                customer.graphData.retailMoneyCumulative[lastIndex]);\n        }\n\n        function processCustomerTick (customerTick) {\n            var retail = customerTick.retail;\n            var powerIndex = service.powerTypeMap[customerTick.id];\n            var aggCustomer = service.aggCustomers[powerIndex];\n            var lastIndex = aggCustomer.graphData.retailSubscription.length - 1;\n\n            if (retail && retail.hasOwnProperty('sub')) {\n                aggCustomer.retail.sub += retail.sub;\n                aggCustomer.graphData.retailSubscription[lastIndex] += retail.sub;\n                aggCustomer.graphData.retailSubscriptionCumulative[lastIndex] += retail.sub;\n            }\n\n            if (retail && retail.hasOwnProperty('kwh')) {\n                aggCustomer.retail.kwh += retail.kwh;\n                aggCustomer.graphData.retailKwh[lastIndex] += retail.kwh;\n                aggCustomer.graphData.retailKwhCumulative[lastIndex] += retail.kwh;\n            }\n\n            if (retail && retail.hasOwnProperty('m')) {\n                aggCustomer.retail.m += retail.m;\n                aggCustomer.graphData.retailMoney[lastIndex] += retail.m;\n                aggCustomer.graphData.retailMoneyCumulative[lastIndex] += retail.m;\n            }\n\n            if (retail && retail.hasOwnProperty('actTx')) {\n                aggCustomer.retail.actTx += retail.actTx;\n            }\n\n            if (retail && retail.hasOwnProperty('rvkTx')) {\n                aggCustomer.retail.rvkTx += retail.rvkTx;\n            }\n            if (retail && retail.hasOwnProperty('pubTx')) {\n                aggCustomer.retail.pubTx += retail.pubTx;\n            }\n        }\n\n        function handlePushMessage (obj) {\n            var message = obj.message;\n            var type = obj.type;\n\n            if (type.localeCompare('INIT') === 0) {\n                // initialize the front-end model\n                service.gameName = obj.game;\n                setStatus(message.state);\n                service.timeInstances = [];\n                processCompetition(message.competition);\n                processBrokers(message.brokers);\n                processCustomers(message.customers);\n\n                message.snapshots.forEach(function (snapshot) {\n                    processSnapshot(snapshot);\n                });\n                $rootScope.$broadcast('gameInitialized');\n                service.queue.forEach(function(obj) {\n                    if (obj.game === service.gameName) {\n                        handlePushMessage(obj);\n                    } else {\n                        console.log('ignore ' + obj.type + ' ' + obj.game);\n                    }\n                });\n                service.queue = [];\n                return;\n            }\n            if (service.gameName !== obj.game) {\n                console.log('queue ' + obj.type + ' ' + obj.game);\n                service.queue.push(obj);\n                return;\n            }\n            if (type.localeCompare('INFO') === 0) {\n                setStatus(message);\n            }\n            else if (type.localeCompare('DATA') === 0) {\n                processSnapshot(message);\n            }\n        }\n\n        return service;\n    }\n\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Push', Push);\n\n    Push.$inject = ['$http', '$cookies', '$q', '$timeout', '$log', 'DEBUG_INFO_ENABLED'];\n\n    var clientId = Math.round((Math.random() * Number.MAX_SAFE_INTEGER)).toString(36);\n\n    function Push ($http, $cookies, $q, $timeout, $log, DEBUG_INFO_ENABLED) {\n        var service = {\n            receive: receive,\n            onConnectionChanged: onConnectionChanged\n        };\n\n        var loc = window.location;\n        var host = loc.host\n        var pathname = loc.pathname\n        if (pathname.endsWith('index.html')) {\n            pathname = pathname.substring(0, pathname.length - 10);\n        }\n        var SOCKET_URL = '//' + host + pathname + 'websocket/push';\n        var TOPIC = '/topic/push';\n\n        var RECONNECT_TIMEOUT_START = 125;\n        var RECONNECT_TIMEOUT_LIMIT = 8000;\n        var delay = RECONNECT_TIMEOUT_START;\n        var offset = Math.ceil(Math.random() * RECONNECT_TIMEOUT_START);\n\n        var listener = $q.defer();\n\n        var connected = false;\n        var connectionChanged = null;\n\n        var socket = {\n            client: null,\n            stomp: null\n        };\n\n        function receive () {\n            return listener.promise;\n        }\n\n        function onConnectionChanged(callback) {\n            connectionChanged = callback;\n        }\n\n        function getMessage (data) {\n            return JSON.parse(data);\n        }\n\n        function success () {\n            if (!connected) {\n                connected = true;\n                connectionChanged(connected);\n            }\n            // new values\n            delay = RECONNECT_TIMEOUT_START;\n            socket.stomp.subscribe(TOPIC, function (data) {\n                listener.notify(getMessage(data.body));\n            }, {\n                id: clientId\n            });\n        }\n\n        function failure (error) {\n            if (connected) {\n                connected = false;\n                connectionChanged(connected);\n            }\n            $log.debug('STOMP error ' + error);\n            $log.debug('reconnecting in ~' + delay + ' ms.');\n            $timeout(function () {\n                delay = Math.min(2 * delay, RECONNECT_TIMEOUT_LIMIT);\n                initialize();\n            }, delay + offset);\n        }\n\n        function initialize () {\n            var headers = {};\n            headers[$http.defaults.xsrfHeaderName] = $cookies.get($http.defaults.xsrfCookieName);\n            socket.client = new SockJS(SOCKET_URL);\n            socket.stomp = Stomp.over(socket.client);\n            socket.stomp.connect(headers, success, failure);\n            if (!DEBUG_INFO_ENABLED) {\n                socket.stomp.debug = null;\n            }\n        }\n\n        initialize();\n\n        return service;\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account', 'JhiTrackerService'];\n\n    function Principal ($q, Account, JhiTrackerService) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n                JhiTrackerService.connect();\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' , 'JhiTrackerService'];\n\n    function AuthServerProvider ($http, $localStorage , JhiTrackerService) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n            JhiTrackerService.disconnect();\n\n\n            // logout from the server\n            $http.post('api/logout').then(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'JhiTrackerService'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, JhiTrackerService) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    JhiTrackerService.sendActivity();\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('home', {\n            parent: 'app',\n            url: '/home',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('graphs', {\n            parent: 'app',\n            url: '/',\n            data: {\n                pageTitle: 'Graphs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/graphs/graphs.html',\n                    controller: 'GraphsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphsController', GraphsController);\n\n    GraphsController.$inject = ['$scope', 'State'];\n\n    function GraphsController ($scope, State) {\n        var vm = this;\n\n        vm.state = State;\n        vm.changeDetection = {};\n        vm.tab = 'retail';\n        vm.graphs = {};\n\n        vm.colors = [ '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9',\n            '#f15c80', '#e4d354', '#2b908f', '#91e8e1','#f45b5b'];\n\n        vm.symbolMap = {\n            'circle': '&#9679',\n            'square': '&#9632',\n            'diamond': '&#9670',\n            'triangle': '&#9650',\n            'triangle-down': '&#9660'\n        };\n        vm.symbols = Object.keys(vm.symbolMap);\n\n        var chartConfig = {\n            chart: {\n                animation: false,\n                zoomType: 'x'\n            },\n            rangeSelector: {\n                enabled: true\n            },\n            navigator: {\n                enabled: true,\n                adaptToUpdatedData: false,\n                series: {\n                    type: 'line',\n                    lineWidth: 0,\n                },\n                height: 16\n            },\n            series: [],\n            title: {\n                text: ''\n            },\n            tooltip: {\n                useHTML: true,\n                shared: true,\n                formatter: function() {\n                    var head = '<small>' + Highcharts.dateFormat('%e %b %Y &nbsp; %H:%M', this.x) + '</small>' +\n                        '<table style=\"min-width: 175px\"><tr><td colspan=\"3\">&nbsp;</td></tr>';\n                    var rows = [];\n                    this.points.forEach(function(point) {\n                        var symbol = vm.symbolMap[point.series.symbol];\n                        var value = point.y.toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n                        rows.push([point.y,\n                            '<tr>' +\n                            '<td style=\"text-align: center; color: ' + point.series.color + '\">' + symbol + '</td>' +\n                            '<td style=\"text-align: left\">' + point.series.name + '</td>' +\n                            '<td style=\"text-align: right\"><b>' + value + '</b></td>' +\n                            '</tr>']);\n                    });\n\n                    var foot = '</table>';\n\n                    // Sort rows\n                    rows = rows.sort(function(a, b) {\n                        return b[0] - a[0];\n                    }).map(function(a) {\n                        return a[1];\n                    });\n\n                    return head + rows.join('') + foot;\n                }\n\n            },\n            plotOptions: { series: { states: { hover: { lineWidth: 2 } } } },\n            chartType: 'stock',\n            credits: {\n                enabled: false\n            }\n        };\n\n        vm.toggleBroker = function (index) {\n            var broker = State.brokers[index];\n            var enabled = !broker.enabled;\n            broker.enabled = enabled;\n            Object.keys(vm.graphs).forEach(function(key) {\n                vm.graphs[key].series.some(function(series, index) {\n                    if (series.id === key + '_' + broker.id) {\n                        series.visible = broker.enabled;\n                        return true;\n                    }\n                });\n                State.changed[key] = true;\n            });\n        };\n\n        function initCharts () {\n            Object.keys(vm.state.allGraphKeys).forEach(function(key) {\n                vm.graphs[key] = angular.copy(chartConfig);\n                vm.changeDetection[key] = function(config) {\n                    if (!key.startsWith(vm.tab) && !key.startsWith('all')) {\n                        return true;\n                    }\n                    var same = true;\n                    if (config.series.length) {\n                        same = !State.changed[key];\n                        State.changed[key] = false;\n                    }\n                    return same;\n                };\n            });\n\n            if (vm.state.competition && vm.state.competition.simulationBaseTime) {\n                vm.duration = vm.state.competition.timeslotDuration; // one hour\n                vm.start = Date.parse(vm.state.competition.simulationBaseTime);\n                // Uggh.. Detect boot game by number of brokers\n                if (State.brokers.length > 1) {\n                    vm.start += vm.duration * (vm.state.competition.bootstrapTimeslotCount + vm.state.competition.bootstrapDiscardedTimeslots);\n                }\n            }\n            State.brokers.forEach(function (broker, index) {\n                var color = vm.colors[index % vm.colors.length];\n                var symbol = vm.symbols[index % vm.symbols.length];\n\n                Object.keys(vm.state.allGraphKeys).forEach(function(key) {\n                    vm.graphs[key].series.push(angular.extend(\n                        {\n                            id: key + '_' + broker.id,\n                            name: broker.name,\n                            color: color,\n                            marker: {\n                                enabled: true,\n                                radius: 1,\n                                symbol: symbol\n                            },\n                            visible: broker.enabled,\n                            data: broker.graphData[key],\n                            pointStart: vm.start,\n                            pointInterval: vm.duration,\n                            type: 'line',\n                            lineWidth: 1,\n                            states: {\n                                hover: { lineWidth: 1 }\n                            }\n                        },\n                        vm.state.allGraphKeys[key]\n                    ));\n                });\n\n            });\n        }\n\n        $scope.$on('gameInitialized', function (/*event*/) {\n            console.log('gameInitialized');\n            initCharts();\n        });\n\n        initCharts();\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GamesFilePickerController', GamesFilePickerController);\n\n    GamesFilePickerController.$inject = ['$scope', '$uibModalInstance', 'fileType', 'Files', 'Games'];\n\n    function GamesFilePickerController($scope, $uibModalInstance, fileType, Files, Games) {\n        var vm = this;\n\n        vm.fileType = fileType;\n        vm.selected = null;\n        vm.itemsPerPage = 10;\n        vm.filesCollection = [];\n\n        vm.refresh = refresh;\n        vm.cancel = cancel;\n        vm.submit = submit;\n        vm.select = select;\n\n        vm.refresh();\n\n        var selectTime = -250;\n        function select (row) {\n            if (vm.selected != null && vm.selected.id === row.id) {\n                if ((Date.now() - selectTime) < 250) {\n                    submit();\n                } else {\n                    vm.selected = null;\n                }\n                selectTime = -250;\n            } else {\n                vm.selected = row;\n                selectTime = Date.now();\n            }\n        }\n\n        function refresh () {\n            vm.filesCollection = Files.query({type: vm.fileType});\n        }\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function submit () {\n            Games[vm.fileType + 'File'] = vm.selected;\n            $uibModalInstance.close(vm.selected);\n        }\n    }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('visualizer2App')\n    .config(stateConfig);\n\n  stateConfig.$inject = ['$stateProvider'];\n\n  function stateConfig ($stateProvider) {\n    $stateProvider.state('games', {\n      parent: 'app',\n      url: '/games',\n      data: {\n        authorities: ['ROLE_USER'],\n        pageTitle: 'Games'\n      },\n      views: {\n        'content@': {\n          templateUrl: 'app/games/games.html',\n          controller: 'GamesController',\n          controllerAs: 'vm'\n        }\n      }\n    })\n    .state('games.filepicker', {\n      parent: 'games',\n      url: '/filepicker/{fileType:string}',\n      data: {\n        authorities: ['ROLE_USER']\n      },\n      params: {\n        fileType: ''\n      },\n      onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n        $uibModal.open({\n          templateUrl: 'app/games/games-filepicker-dialog.html',\n          controller: 'GamesFilePickerController',\n          controllerAs: 'vm',\n          size: 'lg',\n          resolve: {\n            fileType: function() { return $stateParams.fileType; }\n          }\n        }).result.then(function(file) {\n          $state.go('games');\n        }, function() {\n          $state.go('^');\n        });\n      }]\n    });\n  }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('visualizer2App')\n    .factory('Games', Games);\n\n  Games.$inject = ['$http'];\n\n  function Games ($http) {\n    var service = {\n      list: list,\n      boot: boot,\n      run: run,\n      replayInternal: replayInternal,\n      replayExternal: replayExternal,\n      close: close,\n      reset: reset\n    };\n    service.reset();\n\n    function reset () {\n      service.bootFile = null;\n      service.stateFile = null;\n      service.seedFile = null;\n      service.configFile = null;\n      service.weatherFile = null;\n    }\n\n    function list (success, error) {\n      console.log('Fetching list');\n      $http.get('api/mygames', httpOpts).then(success, error);\n    }\n\n    function boot (game, overwrite, success, error) {\n      console.log('Starting boot');\n      $http.post('api/bootgame?overwrite=' + overwrite, game).then(success, error);\n    }\n\n    function run (game, overwrite, success, error) {\n      console.log('Starting game');\n      $http.post('api/simgame?overwrite=' + overwrite, game).then(success, error);\n    }\n\n    function replayInternal (file, success, error) {\n      console.log('Starting replay internal');\n      $http.post('api/replaygame_internal', file).then(success, error);\n    }\n\n\n    function replayExternal (file, success, error) {\n      console.log('Starting replay external');\n      $http.post('api/replaygame_external', file).then(success, error);\n    }\n\n    function close (success, error) {\n      console.log('Closing game');\n      $http.post('api/closegame').then(success, error);\n    }\n\n    return service;\n\n\n    var httpOpts = {\n      transformResponse: function (data) {\n        data = angular.fromJson(data);\n        data.date = DateUtils.convertDateTimeFromServer(data.date);\n        return data;\n      }\n    };\n  }\n})();","(function() {\n  'use strict';\n\n  angular\n    .module('visualizer2App')\n    .controller('GamesController', GamesController);\n\n  GamesController.$inject = ['$log', 'AlertService', 'State', 'Games'];\n\n  function GamesController ($log, AlertService, State, Games) {\n    var vm = this;\n\n    vm.setMode = setMode;\n    vm.setGameName = setGameName;\n    vm.addBroker = addBroker;\n    vm.removeBroker = removeBroker;\n    vm.getFile = getFile;\n    vm.clearFile = clearFile;\n    vm.setSource = setSource;\n    vm.setReplayUrl = setReplayUrl;\n    vm.start = start;\n    vm.stop = stop;\n    vm.isStartButtonDisabled = isStartButtonDisabled;\n    vm.isStopButtonDisabled = isStopButtonDisabled;\n    vm.state = State;\n\n    setMode('');\n\n    function setMode (mode) {\n      vm.mode = mode;\n      vm.gameName = '';\n      vm.gameNameTemp = '';\n      vm.overwrite = false;\n      vm.brokerNames = '';\n      vm.brokers = {};\n      vm.brokerCollection = [];\n      vm.games = [];\n      setSource(null);\n\n      Games.reset();\n    }\n\n    function setGameName (name) {\n      if (name === undefined) {\n        vm.gameName = vm.gameNameTemp;\n      } else {\n        vm.gameName = vm.gameNameTemp = name;\n      }\n    }\n\n    function addBroker (name) {\n      if (!vm.brokers.hasOwnProperty(name)) {\n        vm.brokers[name] = true;\n        vm.brokerName = null;\n        vm.brokerCollection = Object.keys(vm.brokers);\n      } else {\n        AlertService.error('Broker ' + name + ' was already added');\n      }\n    }\n\n    function removeBroker (name) {\n      if (vm.brokers.hasOwnProperty(name)) {\n        delete vm.brokers[name];\n        vm.brokerCollection = Object.keys(vm.brokers);\n      } else {\n        AlertService.error('Broker ' + name + ' was not added');\n      }\n    }\n\n    function getFile (type) {\n      return Games[type + 'File'];\n    }\n\n    function clearFile (type) {\n      return Games[type + 'File'] = null;\n    }\n\n    function setSource (source) {\n      vm.replaySource = source;\n      vm.replayUrl = '';\n      vm.replayUrlTemp = '';\n      vm.replayGame = null;\n    }\n\n    function setReplayUrl (url) {\n      if (url === undefined) {\n        vm.replayUrl = vm.replayUrlTemp;\n      } else {\n        vm.replayUrl = vm.replayUrlTemp = url;\n      }\n    }\n\n    function start () {\n      if (vm.mode === 'BOOT') {\n        startBoot();\n      } else if (vm.mode === 'SIM') {\n        startSim();\n      } else if (vm.mode === 'REPLAY') {\n        startReplay();\n      } else {\n        $log.error('Unknown game mode selected: ' + vm.mode);\n      }\n    }\n\n    function stop () {\n      if (State.gameStatus === 'RUNNING' || State.gameStatus === 'WAITING') {\n        stopGame();\n      } else {\n        $log.error('Can\\'t stop game, doesn\\'t seem to be anything running');\n      }\n    }\n\n    function isStartButtonDisabled () {\n      return !isGameValid() || !State.gameStatus || State.gameStatus === 'RUNNING' || State.gameStatus === 'OFFLINE';\n    }\n\n    function isStopButtonDisabled () {\n      return State.gameStatus !== 'RUNNING' && State.gameStatus !== 'WAITING';\n    }\n\n    // HELPER FUNCTIONS\n\n    function isGameValid () {\n      if (!vm.mode) {\n        return false;\n      } else if (vm.mode === 'SIM' && vm.gameName && Games.bootFile && vm.brokerCollection.length > 0) {\n        return true;\n      } else if (vm.mode === 'BOOT' && vm.gameName) {\n        return true;\n      } else if (vm.mode === 'REPLAY' && vm.replaySource && (Games.stateFile || vm.replayUrl)) {\n        return true;\n      }\n      return false;\n    }\n\n    function startBoot () {\n      vm.setGameName();\n      var game = {\n        id: null,\n        name: vm.gameName,\n        type: 'BOOT',\n        shared: false,\n        completed: false,\n        seedFile : Games.seedFile,\n        configFile : Games.configFile,\n        weatherFile : Games.weatherFile\n      };\n      Games.boot(game, vm.overwrite,\n        function () {\n          setMode('');\n        },\n        function (error) {\n          console.log('Failed boot', error);\n        }\n      );\n    }\n\n    function startSim () {\n      vm.setGameName();\n      var game = {\n        id: null,\n        name: vm.gameName,\n        type: 'SIM',\n        shared: false,\n        completed: false,\n        bootFile : Games.bootFile,\n        seedFile : Games.seedFile,\n        configFile : Games.configFile,\n        weatherFile : Games.weatherFile,\n        brokers: vm.brokerCollection.join(',')\n      };\n      Games.run(game, vm.overwrite,\n        function () {\n          setMode('');\n        },\n        function (error) {\n          console.log('Failed sim', error);\n        }\n      );\n    }\n\n    function startReplay () {\n      if  (vm.replaySource === 'EXTERNAL') {\n        Games.replayExternal(vm.replayUrl,\n            function () {\n              setMode('');\n            },\n            function (error) {\n              console.error('Failed replay', error);\n            }\n        );\n      } else {\n        Games.replayInternal(Games.stateFile,\n            function () {\n              setMode('');\n            },\n            function (error) {\n              console.error('Failed replay', error);\n            }\n        );\n      }\n    }\n\n    function stopGame () {\n      Games.close(\n          function() {\n            setMode('');\n            setSource('');\n          },\n          function (error) {\n            console.error('Failed stop', error);\n          }\n      );\n    }\n  }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('files', {\n            parent: 'app',\n            url: '/files',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Files'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/files/files.html',\n                    controller: 'FilesController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Files', Files);\n\n    Files.$inject = ['$resource'];\n\n    function Files ($resource) {\n        var service = $resource('api/myfiles/:type\\\\/', {}, {\n            'query': {\n                method: 'GET',\n                params: { type: '@type' },\n                isArray: true\n            },\n            'upload': {\n                method: 'POST',\n                params: { type: '@type' },\n                transformRequest: function (data) {\n                    if (data === undefined) {\n                      return data;\n                    }\n                    var fd = new FormData();\n                    angular.forEach(data, function (value, key) {\n                        if (value instanceof FileList) {\n                            if (value.length === 1) {\n                                fd.append(key, value[0]);\n                            } else {\n                                angular.forEach(value, function (file, index) {\n                                    fd.append(key + '_' + index, file);\n                                });\n                            }\n                        } else {\n                            fd.append(key, value);\n                        }\n                    });\n                    return fd;\n                },\n                headers: {\n                    'Content-Type': undefined\n                }\n            }\n        })\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FilesController', FilesController);\n\n    FilesController.$inject = ['$window', 'AlertService', 'File', 'Files'];\n\n    function FilesController ($window, AlertService, File, Files) {\n        var vm = this;\n        vm.refreshFiles = refreshFiles; // TODO push changes via websockets?\n        vm.resetUpload = resetUpload;\n        vm.doUpload = doUpload;\n        vm.doDownload = doDownload;\n        vm.doDelete = doDelete;\n\n        vm.itemsPerPage = 10;\n\n        vm.refreshFiles();\n        vm.resetUpload();\n\n        function refreshFiles () {\n            vm.filesCollection = Files.query({type:'any'});\n        }\n\n        function resetUpload () {\n            vm.uploadFile = null;\n            vm.uploadShared = false;\n            vm.uploadOverwrite = false;\n            vm.uploadType = '';\n        }\n\n        function doUpload () {\n            Files.upload({\n                file: vm.uploadFile,\n                type: vm.uploadType,\n                shared: vm.uploadShared,\n                overwrite: vm.uploadOverwrite\n            }, function() {\n                angular.element('#fileForm')[0].reset();\n                vm.resetUpload();\n                vm.refreshFiles();\n            }, function(err) {\n                AlertService.error('Error: ' + err.data.message + ' (' + err.status + ' ' + err.statusText + ')');\n            });\n        }\n\n        function doDelete (id) {\n            File.delete({id: id}, function() {\n                vm.refreshFiles();\n            });\n        }\n\n        function doDownload (type, id) {\n            $window.location = 'api/myfiles/' + type.toLowerCase() + '/' + id;\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewDialogController', ViewDialogController);\n\n    ViewDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'View', 'User', 'Chart'];\n\n    function ViewDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, View, User, Chart) {\n        var vm = this;\n\n        vm.view = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n        vm.charts = Chart.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.view.id !== null) {\n                View.update(vm.view, onSaveSuccess, onSaveError);\n            } else {\n                View.save(vm.view, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:viewUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewDetailController', ViewDetailController);\n\n    ViewDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'View', 'User', 'Chart'];\n\n    function ViewDetailController($scope, $rootScope, $stateParams, previousState, entity, View, User, Chart) {\n        var vm = this;\n\n        vm.view = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:viewUpdate', function(event, result) {\n            vm.view = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewDeleteController',ViewDeleteController);\n\n    ViewDeleteController.$inject = ['$uibModalInstance', 'entity', 'View'];\n\n    function ViewDeleteController($uibModalInstance, entity, View) {\n        var vm = this;\n\n        vm.view = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            View.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('view', {\n            parent: 'entity',\n            url: '/view?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Views'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/view/views.html',\n                    controller: 'ViewController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('view-detail', {\n            parent: 'view',\n            url: '/view/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'View'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/view/view-detail.html',\n                    controller: 'ViewDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'View', function($stateParams, View) {\n                    return View.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'view',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('view-detail.edit', {\n            parent: 'view-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-dialog.html',\n                    controller: 'ViewDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['View', function(View) {\n                            return View.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('view.new', {\n            parent: 'view',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-dialog.html',\n                    controller: 'ViewDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                graphs: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('view', null, { reload: 'view' });\n                }, function() {\n                    $state.go('view');\n                });\n            }]\n        })\n        .state('view.edit', {\n            parent: 'view',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-dialog.html',\n                    controller: 'ViewDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['View', function(View) {\n                            return View.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('view', null, { reload: 'view' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('view.delete', {\n            parent: 'view',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-delete-dialog.html',\n                    controller: 'ViewDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['View', function(View) {\n                            return View.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('view', null, { reload: 'view' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('View', View);\n\n    View.$inject = ['$resource'];\n\n    function View ($resource) {\n        var resourceUrl =  'api/views/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewController', ViewController);\n\n    ViewController.$inject = ['View', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function ViewController(View, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            View.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.views = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphDialogController', GraphDialogController);\n\n    GraphDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Graph', 'User'];\n\n    function GraphDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Graph, User) {\n        var vm = this;\n\n        vm.graph = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.graph.id !== null) {\n                Graph.update(vm.graph, onSaveSuccess, onSaveError);\n            } else {\n                Graph.save(vm.graph, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:graphUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphDetailController', GraphDetailController);\n\n    GraphDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Graph', 'User'];\n\n    function GraphDetailController($scope, $rootScope, $stateParams, previousState, entity, Graph, User) {\n        var vm = this;\n\n        vm.graph = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:graphUpdate', function(event, result) {\n            vm.graph = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphDeleteController',GraphDeleteController);\n\n    GraphDeleteController.$inject = ['$uibModalInstance', 'entity', 'Graph'];\n\n    function GraphDeleteController($uibModalInstance, entity, Graph) {\n        var vm = this;\n\n        vm.graph = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Graph.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('graph', {\n            parent: 'entity',\n            url: '/graph?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Graphs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/graph/graphs.html',\n                    controller: 'GraphController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('graph-detail', {\n            parent: 'graph',\n            url: '/graph/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Graph'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/graph/graph-detail.html',\n                    controller: 'GraphDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Graph', function($stateParams, Graph) {\n                    return Graph.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'graph',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('graph-detail.edit', {\n            parent: 'graph-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-dialog.html',\n                    controller: 'GraphDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Graph', function(Graph) {\n                            return Graph.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('graph.new', {\n            parent: 'graph',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-dialog.html',\n                    controller: 'GraphDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                type: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('graph', null, { reload: 'graph' });\n                }, function() {\n                    $state.go('graph');\n                });\n            }]\n        })\n        .state('graph.edit', {\n            parent: 'graph',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-dialog.html',\n                    controller: 'GraphDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Graph', function(Graph) {\n                            return Graph.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('graph', null, { reload: 'graph' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('graph.delete', {\n            parent: 'graph',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-delete-dialog.html',\n                    controller: 'GraphDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Graph', function(Graph) {\n                            return Graph.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('graph', null, { reload: 'graph' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('Graph', Graph);\n\n    Graph.$inject = ['$resource'];\n\n    function Graph ($resource) {\n        var resourceUrl =  'api/graphs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphController', GraphController);\n\n    GraphController.$inject = ['Graph', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function GraphController(Graph, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Graph.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.graphs = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameDialogController', GameDialogController);\n\n    GameDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Game', 'User', 'File'];\n\n    function GameDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Game, User, File) {\n        var vm = this;\n\n        vm.game = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.users = User.query();\n        vm.files = File.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.game.id !== null) {\n                Game.update(vm.game, onSaveSuccess, onSaveError);\n            } else {\n                Game.save(vm.game, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:gameUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.date = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameDetailController', GameDetailController);\n\n    GameDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Game', 'User', 'File'];\n\n    function GameDetailController($scope, $rootScope, $stateParams, previousState, entity, Game, User, File) {\n        var vm = this;\n\n        vm.game = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:gameUpdate', function(event, result) {\n            vm.game = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameDeleteController',GameDeleteController);\n\n    GameDeleteController.$inject = ['$uibModalInstance', 'entity', 'Game'];\n\n    function GameDeleteController($uibModalInstance, entity, Game) {\n        var vm = this;\n\n        vm.game = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Game.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('game', {\n            parent: 'entity',\n            url: '/game?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Games'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/game/games.html',\n                    controller: 'GameController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('game-detail', {\n            parent: 'game',\n            url: '/game/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Game'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/game/game-detail.html',\n                    controller: 'GameDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Game', function($stateParams, Game) {\n                    return Game.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'game',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('game-detail.edit', {\n            parent: 'game-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-dialog.html',\n                    controller: 'GameDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Game', function(Game) {\n                            return Game.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('game.new', {\n            parent: 'game',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-dialog.html',\n                    controller: 'GameDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                type: null,\n                                name: null,\n                                shared: false,\n                                date: null,\n                                brokers: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('game', null, { reload: 'game' });\n                }, function() {\n                    $state.go('game');\n                });\n            }]\n        })\n        .state('game.edit', {\n            parent: 'game',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-dialog.html',\n                    controller: 'GameDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Game', function(Game) {\n                            return Game.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('game', null, { reload: 'game' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('game.delete', {\n            parent: 'game',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-delete-dialog.html',\n                    controller: 'GameDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Game', function(Game) {\n                            return Game.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('game', null, { reload: 'game' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('Game', Game);\n\n    Game.$inject = ['$resource', 'DateUtils'];\n\n    function Game ($resource, DateUtils) {\n        var resourceUrl =  'api/games/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.date = DateUtils.convertDateTimeFromServer(data.date);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameController', GameController);\n\n    GameController.$inject = ['Game', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function GameController(Game, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Game.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.games = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileDialogController', FileDialogController);\n\n    FileDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'File', 'User'];\n\n    function FileDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, File, User) {\n        var vm = this;\n\n        vm.file = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.file.id !== null) {\n                File.update(vm.file, onSaveSuccess, onSaveError);\n            } else {\n                File.save(vm.file, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:fileUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileDetailController', FileDetailController);\n\n    FileDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'File', 'User'];\n\n    function FileDetailController($scope, $rootScope, $stateParams, previousState, entity, File, User) {\n        var vm = this;\n\n        vm.file = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:fileUpdate', function(event, result) {\n            vm.file = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileDeleteController',FileDeleteController);\n\n    FileDeleteController.$inject = ['$uibModalInstance', 'entity', 'File'];\n\n    function FileDeleteController($uibModalInstance, entity, File) {\n        var vm = this;\n\n        vm.file = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            File.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('file', {\n            parent: 'entity',\n            url: '/file?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Files'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/file/files.html',\n                    controller: 'FileController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('file-detail', {\n            parent: 'file',\n            url: '/file/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'File'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/file/file-detail.html',\n                    controller: 'FileDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'File', function($stateParams, File) {\n                    return File.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'file',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('file-detail.edit', {\n            parent: 'file-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-dialog.html',\n                    controller: 'FileDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['File', function(File) {\n                            return File.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('file.new', {\n            parent: 'file',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-dialog.html',\n                    controller: 'FileDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                type: null,\n                                name: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('file', null, { reload: 'file' });\n                }, function() {\n                    $state.go('file');\n                });\n            }]\n        })\n        .state('file.edit', {\n            parent: 'file',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-dialog.html',\n                    controller: 'FileDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['File', function(File) {\n                            return File.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('file', null, { reload: 'file' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('file.delete', {\n            parent: 'file',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-delete-dialog.html',\n                    controller: 'FileDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['File', function(File) {\n                            return File.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('file', null, { reload: 'file' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('File', File);\n\n    File.$inject = ['$resource'];\n\n    function File ($resource) {\n        var resourceUrl =  'api/files/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileController', FileController);\n\n    FileController.$inject = ['File', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function FileController(File, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            File.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.files = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartDialogController', ChartDialogController);\n\n    ChartDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Chart', 'User', 'Graph'];\n\n    function ChartDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Chart, User, Graph) {\n        var vm = this;\n\n        vm.chart = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n        vm.graphs = Graph.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.chart.id !== null) {\n                Chart.update(vm.chart, onSaveSuccess, onSaveError);\n            } else {\n                Chart.save(vm.chart, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:chartUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartDetailController', ChartDetailController);\n\n    ChartDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Chart', 'User', 'Graph'];\n\n    function ChartDetailController($scope, $rootScope, $stateParams, previousState, entity, Chart, User, Graph) {\n        var vm = this;\n\n        vm.chart = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:chartUpdate', function(event, result) {\n            vm.chart = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartDeleteController',ChartDeleteController);\n\n    ChartDeleteController.$inject = ['$uibModalInstance', 'entity', 'Chart'];\n\n    function ChartDeleteController($uibModalInstance, entity, Chart) {\n        var vm = this;\n\n        vm.chart = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Chart.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('chart', {\n            parent: 'entity',\n            url: '/chart?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Charts'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/chart/charts.html',\n                    controller: 'ChartController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('chart-detail', {\n            parent: 'chart',\n            url: '/chart/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Chart'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/chart/chart-detail.html',\n                    controller: 'ChartDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Chart', function($stateParams, Chart) {\n                    return Chart.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'chart',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('chart-detail.edit', {\n            parent: 'chart-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-dialog.html',\n                    controller: 'ChartDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Chart', function(Chart) {\n                            return Chart.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('chart.new', {\n            parent: 'chart',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-dialog.html',\n                    controller: 'ChartDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('chart', null, { reload: 'chart' });\n                }, function() {\n                    $state.go('chart');\n                });\n            }]\n        })\n        .state('chart.edit', {\n            parent: 'chart',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-dialog.html',\n                    controller: 'ChartDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Chart', function(Chart) {\n                            return Chart.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('chart', null, { reload: 'chart' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('chart.delete', {\n            parent: 'chart',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-delete-dialog.html',\n                    controller: 'ChartDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Chart', function(Chart) {\n                            return Chart.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('chart', null, { reload: 'chart' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('Chart', Chart);\n\n    Chart.$inject = ['$resource'];\n\n    function Chart ($resource) {\n        var resourceUrl =  'api/charts/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartController', ChartController);\n\n    ChartController.$inject = ['Chart', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function ChartController(Chart, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Chart.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.charts = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('visualizer2App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils($filter) {\n\n        var service = {\n            convertDateTimeFromServer: convertDateTimeFromServer,\n            convertLocalDateFromServer: convertLocalDateFromServer,\n            convertLocalDateToServer: convertLocalDateToServer,\n            dateformat: dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer(date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer(date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer(date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat() {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = false;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: false\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('visualizer2App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('visualizer2App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 10000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('visualizer2App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('visualizer2App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n                          'Auth', 'Principal', 'VERSION', 'CONFIG', 'DEBUG_INFO_ENABLED'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n                          Auth, Principal, VERSION, CONFIG, DEBUG_INFO_ENABLED) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n            $rootScope.CONFIG = CONFIG;\n            $rootScope.DEBUG_INFO_ENABLED = DEBUG_INFO_ENABLED;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'visualizer2' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n","(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('visualizer2App')\n        .constant('VERSION', \"1.9.1\")\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('CONFIG', {\n\t\"mode\": \"research\"\n})\n;\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management.new', {\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management-detail', {\n            parent: 'user-management',\n            url: '/user/{login}',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'visualizer2'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.delete', {\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-tracker', {\n            parent: 'admin',\n            url: '/tracker',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Real-time user activities'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/tracker/tracker.html',\n                    controller: 'JhiTrackerController',\n                    controllerAs: 'vm'\n                }\n            },\n            onEnter: ['JhiTrackerService', function(JhiTrackerService) {\n                JhiTrackerService.subscribe();\n            }],\n            onExit: ['JhiTrackerService', function(JhiTrackerService) {\n                JhiTrackerService.unsubscribe();\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n    /* globals SockJS, Stomp */\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiTrackerService', JhiTrackerService);\n\n    JhiTrackerService.$inject = ['$rootScope', '$window', '$cookies', '$http', '$q'];\n\n    function JhiTrackerService ($rootScope, $window, $cookies, $http, $q) {\n        var stompClient = null;\n        var subscriber = null;\n        var listener = $q.defer();\n        var connected = $q.defer();\n        var alreadyConnectedOnce = false;\n\n        var service = {\n            connect: connect,\n            disconnect: disconnect,\n            receive: receive,\n            sendActivity: sendActivity,\n            subscribe: subscribe,\n            unsubscribe: unsubscribe\n        };\n\n        return service;\n\n        function connect () {\n            //building absolute path so that websocket doesnt fail when deploying with a context path\n            var loc = $window.location;\n            var url = '//' + loc.host + loc.pathname + 'websocket/tracker';\n            var socket = new SockJS(url);\n            stompClient = Stomp.over(socket);\n            var stateChangeStart;\n            var headers = {};\n            headers[$http.defaults.xsrfHeaderName] = $cookies.get($http.defaults.xsrfCookieName);\n            stompClient.connect(headers, function() {\n                connected.resolve('success');\n                sendActivity();\n                if (!alreadyConnectedOnce) {\n                    stateChangeStart = $rootScope.$on('$stateChangeStart', function () {\n                        sendActivity();\n                    });\n                    alreadyConnectedOnce = true;\n                }\n            });\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n            });\n        }\n\n        function disconnect () {\n            if (stompClient !== null) {\n                stompClient.disconnect();\n                stompClient = null;\n            }\n        }\n\n        function receive () {\n            return listener.promise;\n        }\n\n        function sendActivity() {\n            if (stompClient !== null && stompClient.connected) {\n                stompClient\n                    .send('/topic/activity',\n                    {},\n                    angular.toJson({'page': $rootScope.toState.name}));\n            }\n        }\n\n        function subscribe () {\n            connected.promise.then(function() {\n                subscriber = stompClient.subscribe('/topic/tracker', function(data) {\n                    listener.notify(angular.fromJson(data.body));\n                });\n            }, null, null);\n        }\n\n        function unsubscribe () {\n            if (subscriber !== null) {\n                subscriber.unsubscribe();\n            }\n            listener = $q.defer();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiTrackerController', JhiTrackerController);\n\n    JhiTrackerController.$inject = ['$cookies', '$http', 'JhiTrackerService'];\n\n    function JhiTrackerController ($cookies, $http, JhiTrackerService) {\n        // This controller uses a Websocket connection to receive user activities in real-time.\n        var vm = this;\n\n        vm.activities = [];\n\n        JhiTrackerService.receive().then(null, null, function(activity) {\n            showActivity(activity);\n        });\n\n        function showActivity(activity) {\n            var existingActivity = false;\n            for (var index = 0; index < vm.activities.length; index++) {\n                if(vm.activities[index].sessionId === activity.sessionId) {\n                    existingActivity = true;\n                    if (activity.page === 'logout') {\n                        vm.activities.splice(index, 1);\n                    } else {\n                        vm.activities[index] = activity;\n                    }\n                }\n            }\n            if (!existingActivity && (activity.page !== 'logout')) {\n                vm.activities.push(activity);\n            }\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n            vm.cachesStats = {};\n            angular.forEach(newValue.gauges, function (value, key) {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(18),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('visualizer2App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ngSanitize',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            'bootstrap.fileField',\n            'smart-table',\n            'highcharts-ng',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n\n(function () {\n\n    angular\n        .module('visualizer2App')\n        .service('State', State);\n\n    State.$inject = ['$rootScope', 'Push'];\n\n    function State ($rootScope, Push) {\n        var service = this;\n\n        service.brokers = [];\n        service.customers = [];\n        service.aggCustomers = [];\n        service.timeInstances = [];\n        service.gameName = '';\n        service.time = '';\n        service.timeSlot = '';\n        service.timeInstance = '';\n        service.queue = [];\n        service.gameStatus = '';\n        service.prevStatus = '';\n        service.gameStatusStyle = 'default';\n\n        service.retailGraphKeys = {\n            'retailMoney': {},\n            'retailMoneyCumulative': {},\n            'retailKwh': {},\n            'retailKwhCumulative': {},\n            'retailSubscription': {},\n            'retailSubscriptionCumulative': {}\n        };\n\n        service.wholesaleGraphKeys = {\n            'wholesaleMoney': {},\n            'wholesaleMoneyCumulative': {},\n            'wholesaleMwh': {},\n            'wholesaleMwhCumulative': {},\n            'wholesalePrice': {},\n            'wholesalePriceBuy': {},\n            'wholesalePriceSell': {},\n        };\n\n        service.allGraphKeys = {\n            'allMoneyCumulative': {},\n        };\n        Object.keys(service.retailGraphKeys).forEach(function(key) {\n            service.allGraphKeys[key] = service.retailGraphKeys[key];\n        });\n        Object.keys(service.wholesaleGraphKeys).forEach(function(key) {\n            service.allGraphKeys[key] = service.wholesaleGraphKeys[key];\n        });\n\n        service.changed = Object.keys(service.allGraphKeys).reduce(function(map, key) {\n            map[key] = false;\n            return map;\n        }, {});\n\n        Push.receive().then(null, null, function (obj) {\n            handlePushMessage(obj);\n        });\n\n        Push.onConnectionChanged(setConnected);\n\n        function initGraphData (keys) {\n            return Object.keys(keys).reduce(function(map, key) {\n                map[key] = [];\n                return map;\n            }, {});\n        }\n\n        function initRetail (retail) {\n            retail.sub = 0;\n            retail.kwh = 0;\n            retail.m = 0;\n            retail.actTx = 0;\n            retail.rvkTx = 0;\n            retail.pubTx = 0;\n            return retail;\n        }\n\n        function initWholesale (wholesale) {\n            wholesale.mwh = 0;\n            wholesale.m = 0;\n            wholesale.p = NaN;\n            wholesale.pb = NaN;\n            wholesale.ps = NaN;\n            return wholesale;\n        }\n\n        function aggCustomer (powerType) {\n            return {\n                'genericPowerType': '',\n                'powerType': powerType,\n                // here we will keep id for each concrete customer so we can\n                // find the powerTypeCustomer\n                'ids': [],\n                'customerClass': [],\n                'population': 0,\n                'retail': initRetail({}),\n                'graphData': initGraphData(service.retailGraphKeys)\n            };\n        }\n\n        function setConnected(connected) {\n            if (connected) {\n                setStatus(service.prevStatus);\n            } else {\n                service.prevStatus = service.gameStatus;\n                setStatus('OFFLINE');\n            }\n        }\n\n        function setStatus (status) {\n            service.gameStatus = status;\n\n            if (status === 'RUNNING') {\n                service.gameStatusStyle = 'success';\n            } else if (status === 'WAITING') {\n                service.gameStatusStyle = 'info';\n            } else if (status === 'FINISHED') {\n                service.gameStatusStyle = 'warning';\n            } else if (status === 'IDLE') {\n                service.gameStatusStyle = 'default';\n            } else {\n                service.gameStatusStyle = 'danger'; // unexpected\n            }\n        }\n\n        function processCompetition (competition) {\n            service.competition = competition;\n        }\n\n        function processSnapshot (snapshot) {\n            service.timeSlot = snapshot.timeSlot;\n            service.timeInstance = new Date(snapshot.timeInstance);\n            service.timeInstances.push(service.timeInstance);\n            service.timeString = '#' + service.timeSlot + ' | ' + Highcharts.dateFormat('%e %b %Y %H:%M', service.timeInstance) + ' UTC';\n\n            // process broker ticks:\n            snapshot.tickValueBrokers.forEach(function (brokerTick) {\n                processBrokerTick(brokerTick);\n            });\n\n            // prepare customer for a tick:\n            service.aggCustomers.forEach(function (customer) {\n                prepareCustomer(customer);\n            });\n\n            // process customer ticks:\n            missing = Object.keys(service.customers).reduce(function(missing, id) {\n                missing[id] = true;\n                return missing;\n            }, {});\n            snapshot.tickValueCustomers.forEach(function (customerTick) {\n                missing[customerTick.id] = false;\n                processCustomerTick(customerTick);\n            });\n            Object.keys(missing).forEach(function(id) {\n                if (missing[id]) {\n                    processCustomerTick({\n                        id: id\n                    });\n                }\n            });\n\n            // mark as dirty\n            Object.keys(service.changed).forEach(function(key) {\n                service.changed[key] = true;\n            });\n        };\n\n        function processBrokers (brokers) {\n            service.brokers = [];\n\n            brokers.forEach(function (broker) {\n                // make a properties if they do not exist (back-end will not\n                // send a property unless it has a value.)\n                broker.cash = 0;\n                broker.retail = initRetail(broker.retail);\n                broker.wholesale = initWholesale(broker.wholesale);\n\n                // add some arrays for graphs:\n                broker.graphData = initGraphData(service.allGraphKeys);\n\n                // begin with every broker enabled / checked\n                broker.enabled = true;\n\n                // add to service.brokers collection:\n                service.brokers[broker.id] = broker;\n            });\n        }\n\n        function processBrokerTick (brokerTick) {\n            var broker = service.brokers[brokerTick.id];\n            var retail = brokerTick.retail;\n            var wholesale = brokerTick.wholesale;\n\n            var cash = brokerTick.hasOwnProperty('cash') ? brokerTick.cash : 0;\n            broker.cash = cash;\n            broker.graphData.allMoneyCumulative.push(cash);\n\n            var sub = retail && retail.hasOwnProperty('sub') ? retail.sub : 0;\n            broker.retail.sub += sub;\n            broker.graphData.retailSubscription.push(sub);\n            broker.graphData.retailSubscriptionCumulative.push(broker.retail.sub);\n\n            var rkwh = retail && retail.hasOwnProperty('kwh') ? retail.kwh : 0;\n            broker.retail.kwh += rkwh;\n            broker.graphData.retailKwh.push(rkwh);\n            broker.graphData.retailKwhCumulative.push(broker.retail.kwh);\n\n            var rm = retail && retail.hasOwnProperty('m') ? retail.m : 0;\n            broker.retail.m += rm;\n            broker.graphData.retailMoney.push(rm);\n            broker.graphData.retailMoneyCumulative.push(broker.retail.m);\n\n            var wmwh = wholesale && wholesale.hasOwnProperty('mwh') ? wholesale.mwh : 0;\n            broker.wholesale.mwh += wmwh;\n            broker.graphData.wholesaleMwh.push(wmwh);\n            broker.graphData.wholesaleMwhCumulative.push(broker.wholesale.mwh);\n\n            var wm = wholesale && wholesale.hasOwnProperty('m') ? wholesale.m : 0;\n            broker.wholesale.m += wm;\n            broker.graphData.wholesaleMoney.push(wm);\n            broker.graphData.wholesaleMoneyCumulative.push(broker.wholesale.m);\n\n            var p = wholesale && wholesale.hasOwnProperty('p') ? wholesale.p : NaN;\n            broker.wholesale.p = isNaN(p) ? null : p;\n            broker.graphData.wholesalePrice.push(broker.wholesale.p);\n\n            var pb = wholesale && wholesale.hasOwnProperty('pb') ? wholesale.pb : NaN;\n            broker.wholesale.pb = isNaN(pb) ? null : pb;\n            broker.graphData.wholesalePriceBuy.push(broker.wholesale.pb);\n\n            var ps = wholesale && wholesale.hasOwnProperty('ps') ? wholesale.ps : NaN;\n            broker.wholesale.ps = isNaN(ps) ? null : ps;\n            broker.graphData.wholesalePriceSell.push(broker.wholesale.ps);\n\n            if (retail && retail.hasOwnProperty('actTx')) {\n                broker.retail.actTx += retail.actTx;\n            }\n            if (retail && retail.hasOwnProperty('rvkTx')) {\n                broker.retail.rvkTx += retail.rvkTx;\n            }\n            if (retail && retail.hasOwnProperty('pubTx')) {\n                broker.retail.pubTx += retail.pubTx;\n            }\n        }\n\n        function processCustomers (customers) {\n            // These are tightly coupled\n            service.aggCustomers = [];\n            service.powerTypes = [];\n            // Map customer.id to powerType (not available in the tick)\n            service.powerTypeMap = {};\n\n            // TODO optimize data structures\n            customers.forEach(function (customer) {\n                var powerType = customer.powerType;\n                var powerIndex = service.powerTypes.indexOf(powerType);\n                if (powerIndex === -1) {\n                    service.powerTypes.push(powerType);\n                    service.aggCustomers.push(aggCustomer(powerType));\n                    powerIndex = service.powerTypes.length - 1;\n                }\n\n                service.powerTypeMap[customer.id] = powerIndex;\n\n                // TODO This isn't right, why are generic and class overwritten?\n                // customerClass not used yet\n                service.aggCustomers[powerIndex].genericPowerType = customer.genericPowerType;\n                service.aggCustomers[powerIndex].ids.push(customer.id);\n                service.aggCustomers[powerIndex].customerClass = customer.customerClass;\n                service.aggCustomers[powerIndex].population += customer.population;\n\n                customer.retail = initRetail(customer.retail);\n                service.customers[customer.id] = customer;\n            });\n        }\n\n        function prepareCustomer (customer) {\n            var lastIndex = customer.graphData.retailSubscription.length - 1;\n            customer.graphData.retailSubscription.push(0);\n            customer.graphData.retailSubscriptionCumulative.push(\n                customer.graphData.retailSubscriptionCumulative[lastIndex]);\n\n            customer.graphData.retailKwh.push(0);\n            customer.graphData.retailKwhCumulative.push(\n                customer.graphData.retailKwhCumulative[lastIndex]);\n\n            customer.graphData.retailMoney.push(0);\n            customer.graphData.retailMoneyCumulative.push(\n                customer.graphData.retailMoneyCumulative[lastIndex]);\n        }\n\n        function processCustomerTick (customerTick) {\n            var retail = customerTick.retail;\n            var powerIndex = service.powerTypeMap[customerTick.id];\n            var aggCustomer = service.aggCustomers[powerIndex];\n            var lastIndex = aggCustomer.graphData.retailSubscription.length - 1;\n\n            if (retail && retail.hasOwnProperty('sub')) {\n                aggCustomer.retail.sub += retail.sub;\n                aggCustomer.graphData.retailSubscription[lastIndex] += retail.sub;\n                aggCustomer.graphData.retailSubscriptionCumulative[lastIndex] += retail.sub;\n            }\n\n            if (retail && retail.hasOwnProperty('kwh')) {\n                aggCustomer.retail.kwh += retail.kwh;\n                aggCustomer.graphData.retailKwh[lastIndex] += retail.kwh;\n                aggCustomer.graphData.retailKwhCumulative[lastIndex] += retail.kwh;\n            }\n\n            if (retail && retail.hasOwnProperty('m')) {\n                aggCustomer.retail.m += retail.m;\n                aggCustomer.graphData.retailMoney[lastIndex] += retail.m;\n                aggCustomer.graphData.retailMoneyCumulative[lastIndex] += retail.m;\n            }\n\n            if (retail && retail.hasOwnProperty('actTx')) {\n                aggCustomer.retail.actTx += retail.actTx;\n            }\n\n            if (retail && retail.hasOwnProperty('rvkTx')) {\n                aggCustomer.retail.rvkTx += retail.rvkTx;\n            }\n            if (retail && retail.hasOwnProperty('pubTx')) {\n                aggCustomer.retail.pubTx += retail.pubTx;\n            }\n        }\n\n        function handlePushMessage (obj) {\n            var message = obj.message;\n            var type = obj.type;\n\n            if (type.localeCompare('INIT') === 0) {\n                // initialize the front-end model\n                service.gameName = obj.game;\n                setStatus(message.state);\n                service.timeInstances = [];\n                processCompetition(message.competition);\n                processBrokers(message.brokers);\n                processCustomers(message.customers);\n\n                message.snapshots.forEach(function (snapshot) {\n                    processSnapshot(snapshot);\n                });\n                $rootScope.$broadcast('gameInitialized');\n                service.queue.forEach(function(obj) {\n                    if (obj.game === service.gameName) {\n                        handlePushMessage(obj);\n                    } else {\n                        console.log('ignore ' + obj.type + ' ' + obj.game);\n                    }\n                });\n                service.queue = [];\n                return;\n            }\n            if (service.gameName !== obj.game) {\n                console.log('queue ' + obj.type + ' ' + obj.game);\n                service.queue.push(obj);\n                return;\n            }\n            if (type.localeCompare('INFO') === 0) {\n                setStatus(message);\n            }\n            else if (type.localeCompare('DATA') === 0) {\n                processSnapshot(message);\n            }\n        }\n\n        return service;\n    }\n\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Push', Push);\n\n    Push.$inject = ['$http', '$cookies', '$q', '$timeout', '$log', 'DEBUG_INFO_ENABLED'];\n\n    var clientId = Math.round((Math.random() * Number.MAX_SAFE_INTEGER)).toString(36);\n\n    function Push ($http, $cookies, $q, $timeout, $log, DEBUG_INFO_ENABLED) {\n        var service = {\n            receive: receive,\n            onConnectionChanged: onConnectionChanged\n        };\n\n        var loc = window.location;\n        var host = loc.host\n        var pathname = loc.pathname\n        if (pathname.endsWith('index.html')) {\n            pathname = pathname.substring(0, pathname.length - 10);\n        }\n        var SOCKET_URL = '//' + host + pathname + 'websocket/push';\n        var TOPIC = '/topic/push';\n\n        var RECONNECT_TIMEOUT_START = 125;\n        var RECONNECT_TIMEOUT_LIMIT = 8000;\n        var delay = RECONNECT_TIMEOUT_START;\n        var offset = Math.ceil(Math.random() * RECONNECT_TIMEOUT_START);\n\n        var listener = $q.defer();\n\n        var connected = false;\n        var connectionChanged = null;\n\n        var socket = {\n            client: null,\n            stomp: null\n        };\n\n        function receive () {\n            return listener.promise;\n        }\n\n        function onConnectionChanged(callback) {\n            connectionChanged = callback;\n        }\n\n        function getMessage (data) {\n            return JSON.parse(data);\n        }\n\n        function success () {\n            if (!connected) {\n                connected = true;\n                connectionChanged(connected);\n            }\n            // new values\n            delay = RECONNECT_TIMEOUT_START;\n            socket.stomp.subscribe(TOPIC, function (data) {\n                listener.notify(getMessage(data.body));\n            }, {\n                id: clientId\n            });\n        }\n\n        function failure (error) {\n            if (connected) {\n                connected = false;\n                connectionChanged(connected);\n            }\n            $log.debug('STOMP error ' + error);\n            $log.debug('reconnecting in ~' + delay + ' ms.');\n            $timeout(function () {\n                delay = Math.min(2 * delay, RECONNECT_TIMEOUT_LIMIT);\n                initialize();\n            }, delay + offset);\n        }\n\n        function initialize () {\n            var headers = {};\n            headers[$http.defaults.xsrfHeaderName] = $cookies.get($http.defaults.xsrfCookieName);\n            socket.client = new SockJS(SOCKET_URL);\n            socket.stomp = Stomp.over(socket.client);\n            socket.stomp.connect(headers, success, failure);\n            if (!DEBUG_INFO_ENABLED) {\n                socket.stomp.debug = null;\n            }\n        }\n\n        initialize();\n\n        return service;\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('ProfileService', ProfileService);\n\n    ProfileService.$inject = ['$http'];\n\n    function ProfileService($http) {\n\n        var dataPromise;\n\n        var service = {\n            getProfileInfo : getProfileInfo\n        };\n\n        return service;\n\n        function getProfileInfo() {\n            if (angular.isUndefined(dataPromise)) {\n                dataPromise = $http.get('api/profile-info').then(function(result) {\n                    if (result.data.activeProfiles) {\n                        var response = {};\n                        response.activeProfiles = result.data.activeProfiles;\n                        response.ribbonEnv = result.data.ribbonEnv;\n                        response.inProduction = result.data.activeProfiles.indexOf(\"prod\") !== -1;\n                        response.swaggerEnabled = result.data.activeProfiles.indexOf(\"swagger\") !== -1;\n                        return response;\n                    }\n                });\n            }\n            return dataPromise;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('pageRibbon', pageRibbon);\n\n    pageRibbon.$inject = ['ProfileService', '$rootScope'];\n\n    function pageRibbon(ProfileService, $rootScope) {\n        var directive = {\n            replace : true,\n            restrict : 'AE',\n            template : '<div class=\"ribbon hidden\"><a href=\"\">{{ribbonEnv}}</a></div>',\n            link : linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            ProfileService.getProfileInfo().then(function(response) {\n                if (response.ribbonEnv) {\n                    scope.ribbonEnv = response.ribbonEnv;\n                    element.addClass(response.ribbonEnv);\n                    element.removeClass('hidden');\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Sessions', Sessions);\n\n    Sessions.$inject = ['$resource'];\n\n    function Sessions ($resource) {\n        return $resource('api/account/sessions/:series', {}, {\n            'getAll': { method: 'GET', isArray: true}\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account', 'JhiTrackerService'];\n\n    function Principal ($q, Account, JhiTrackerService) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n                JhiTrackerService.connect();\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('hasAuthority', hasAuthority);\n\n    hasAuthority.$inject = ['Principal'];\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    hasAnyAuthority.$inject = ['Principal'];\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage' , 'JhiTrackerService'];\n\n    function AuthServerProvider ($http, $localStorage , JhiTrackerService) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            var token = $localStorage.authenticationToken;\n            return token;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return !!token;\n        }\n\n        function login (credentials) {\n            var data = 'j_username=' + encodeURIComponent(credentials.username) +\n                '&j_password=' + encodeURIComponent(credentials.password) +\n                '&remember-me=' + credentials.rememberMe + '&submit=Login';\n\n            return $http.post('api/authentication', data, {\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }\n            }).then(function (response) {\n                return response;\n            });\n        }\n\n        function logout () {\n            JhiTrackerService.disconnect();\n\n\n            // logout from the server\n            $http.post('api/logout').then(function (response) {\n                delete $localStorage.authenticationToken;\n                // to get a new csrf token call the api\n                $http.get('api/account');\n                return response;\n            });\n\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$sessionStorage', '$q', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'JhiTrackerService'];\n\n    function Auth ($rootScope, $state, $sessionStorage, $q, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, JhiTrackerService) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            getPreviousState: getPreviousState,\n            login: login,\n            logout: logout,\n            resetPreviousState: resetPreviousState,\n            storePreviousState: storePreviousState,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register')) {\n                    $state.go('home');\n                }\n\n                // recover and clear previousState after external login redirect (e.g. oauth2)\n                if (isAuthenticated && !$rootScope.fromState.name && getPreviousState()) {\n                    var previousState = getPreviousState();\n                    resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        storePreviousState($rootScope.toState.name, $rootScope.toStateParams);\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied').then(function() {\n                            LoginService.open();\n                        });\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    JhiTrackerService.sendActivity();\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function getPreviousState() {\n            var previousState = $sessionStorage.previousState;\n            return previousState;\n        }\n\n        function resetPreviousState() {\n            delete $sessionStorage.previousState;\n        }\n\n        function storePreviousState(previousStateName, previousStateParams) {\n            var previousState = { \"name\": previousStateName, \"params\": previousStateParams };\n            $sessionStorage.previousState = previousState;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$state', 'Auth', 'Principal', 'ProfileService', 'LoginService'];\n\n    function NavbarController ($state, Auth, Principal, ProfileService, LoginService) {\n        var vm = this;\n\n        vm.isNavbarCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n\n        ProfileService.getProfileInfo().then(function(response) {\n            vm.inProduction = response.inProduction;\n            vm.swaggerEnabled = response.swaggerEnabled;\n        });\n\n        vm.login = login;\n        vm.logout = logout;\n        vm.toggleNavbar = toggleNavbar;\n        vm.collapseNavbar = collapseNavbar;\n        vm.$state = $state;\n\n        function login() {\n            collapseNavbar();\n            LoginService.open();\n        }\n\n        function logout() {\n            collapseNavbar();\n            Auth.logout();\n            $state.go('home');\n        }\n\n        function toggleNavbar() {\n            vm.isNavbarCollapsed = !vm.isNavbarCollapsed;\n        }\n\n        function collapseNavbar() {\n            vm.isNavbarCollapsed = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'Error page!'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                }\n            });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('home', {\n            parent: 'app',\n            url: '/home',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService', '$state'];\n\n    function HomeController ($scope, Principal, LoginService, $state) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n        function register () {\n            $state.go('register');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('graphs', {\n            parent: 'app',\n            url: '/',\n            data: {\n                pageTitle: 'Graphs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/graphs/graphs.html',\n                    controller: 'GraphsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphsController', GraphsController);\n\n    GraphsController.$inject = ['$scope', 'State'];\n\n    function GraphsController ($scope, State) {\n        var vm = this;\n\n        vm.state = State;\n        vm.changeDetection = {};\n        vm.tab = 'retail';\n        vm.graphs = {};\n\n        vm.colors = [ '#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9',\n            '#f15c80', '#e4d354', '#2b908f', '#91e8e1','#f45b5b'];\n\n        vm.symbolMap = {\n            'circle': '&#9679',\n            'square': '&#9632',\n            'diamond': '&#9670',\n            'triangle': '&#9650',\n            'triangle-down': '&#9660'\n        };\n        vm.symbols = Object.keys(vm.symbolMap);\n\n        var chartConfig = {\n            chart: {\n                animation: false,\n                zoomType: 'x'\n            },\n            rangeSelector: {\n                enabled: true\n            },\n            navigator: {\n                enabled: true,\n                adaptToUpdatedData: false,\n                series: {\n                    type: 'line',\n                    lineWidth: 0,\n                },\n                height: 16\n            },\n            series: [],\n            title: {\n                text: ''\n            },\n            tooltip: {\n                useHTML: true,\n                shared: true,\n                formatter: function() {\n                    var head = '<small>' + Highcharts.dateFormat('%e %b %Y &nbsp; %H:%M', this.x) + '</small>' +\n                        '<table style=\"min-width: 175px\"><tr><td colspan=\"3\">&nbsp;</td></tr>';\n                    var rows = [];\n                    this.points.forEach(function(point) {\n                        var symbol = vm.symbolMap[point.series.symbol];\n                        var value = point.y.toFixed(2).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\n                        rows.push([point.y,\n                            '<tr>' +\n                            '<td style=\"text-align: center; color: ' + point.series.color + '\">' + symbol + '</td>' +\n                            '<td style=\"text-align: left\">' + point.series.name + '</td>' +\n                            '<td style=\"text-align: right\"><b>' + value + '</b></td>' +\n                            '</tr>']);\n                    });\n\n                    var foot = '</table>';\n\n                    // Sort rows\n                    rows = rows.sort(function(a, b) {\n                        return b[0] - a[0];\n                    }).map(function(a) {\n                        return a[1];\n                    });\n\n                    return head + rows.join('') + foot;\n                }\n\n            },\n            plotOptions: { series: { states: { hover: { lineWidth: 2 } } } },\n            chartType: 'stock',\n            credits: {\n                enabled: false\n            }\n        };\n\n        vm.toggleBroker = function (index) {\n            var broker = State.brokers[index];\n            var enabled = !broker.enabled;\n            broker.enabled = enabled;\n            Object.keys(vm.graphs).forEach(function(key) {\n                vm.graphs[key].series.some(function(series, index) {\n                    if (series.id === key + '_' + broker.id) {\n                        series.visible = broker.enabled;\n                        return true;\n                    }\n                });\n                State.changed[key] = true;\n            });\n        };\n\n        function initCharts () {\n            Object.keys(vm.state.allGraphKeys).forEach(function(key) {\n                vm.graphs[key] = angular.copy(chartConfig);\n                vm.changeDetection[key] = function(config) {\n                    if (!key.startsWith(vm.tab) && !key.startsWith('all')) {\n                        return true;\n                    }\n                    var same = true;\n                    if (config.series.length) {\n                        same = !State.changed[key];\n                        State.changed[key] = false;\n                    }\n                    return same;\n                };\n            });\n\n            if (vm.state.competition && vm.state.competition.simulationBaseTime) {\n                vm.duration = vm.state.competition.timeslotDuration; // one hour\n                vm.start = Date.parse(vm.state.competition.simulationBaseTime);\n                // Uggh.. Detect boot game by number of brokers\n                if (State.brokers.length > 1) {\n                    vm.start += vm.duration * (vm.state.competition.bootstrapTimeslotCount + vm.state.competition.bootstrapDiscardedTimeslots);\n                }\n            }\n            State.brokers.forEach(function (broker, index) {\n                var color = vm.colors[index % vm.colors.length];\n                var symbol = vm.symbols[index % vm.symbols.length];\n\n                Object.keys(vm.state.allGraphKeys).forEach(function(key) {\n                    vm.graphs[key].series.push(angular.extend(\n                        {\n                            id: key + '_' + broker.id,\n                            name: broker.name,\n                            color: color,\n                            marker: {\n                                enabled: true,\n                                radius: 1,\n                                symbol: symbol\n                            },\n                            visible: broker.enabled,\n                            data: broker.graphData[key],\n                            pointStart: vm.start,\n                            pointInterval: vm.duration,\n                            type: 'line',\n                            lineWidth: 1,\n                            states: {\n                                hover: { lineWidth: 1 }\n                            }\n                        },\n                        vm.state.allGraphKeys[key]\n                    ));\n                });\n\n            });\n        }\n\n        $scope.$on('gameInitialized', function (/*event*/) {\n            console.log('gameInitialized');\n            initCharts();\n        });\n\n        initCharts();\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GamesFilePickerController', GamesFilePickerController);\n\n    GamesFilePickerController.$inject = ['$scope', '$uibModalInstance', 'fileType', 'Files', 'Games'];\n\n    function GamesFilePickerController($scope, $uibModalInstance, fileType, Files, Games) {\n        var vm = this;\n\n        vm.fileType = fileType;\n        vm.selected = null;\n        vm.itemsPerPage = 10;\n        vm.filesCollection = [];\n\n        vm.refresh = refresh;\n        vm.cancel = cancel;\n        vm.submit = submit;\n        vm.select = select;\n\n        vm.refresh();\n\n        var selectTime = -250;\n        function select (row) {\n            if (vm.selected != null && vm.selected.id === row.id) {\n                if ((Date.now() - selectTime) < 250) {\n                    submit();\n                } else {\n                    vm.selected = null;\n                }\n                selectTime = -250;\n            } else {\n                vm.selected = row;\n                selectTime = Date.now();\n            }\n        }\n\n        function refresh () {\n            vm.filesCollection = Files.query({type: vm.fileType});\n        }\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function submit () {\n            Games[vm.fileType + 'File'] = vm.selected;\n            $uibModalInstance.close(vm.selected);\n        }\n    }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('visualizer2App')\n    .config(stateConfig);\n\n  stateConfig.$inject = ['$stateProvider'];\n\n  function stateConfig ($stateProvider) {\n    $stateProvider.state('games', {\n      parent: 'app',\n      url: '/games',\n      data: {\n        authorities: ['ROLE_USER'],\n        pageTitle: 'Games'\n      },\n      views: {\n        'content@': {\n          templateUrl: 'app/games/games.html',\n          controller: 'GamesController',\n          controllerAs: 'vm'\n        }\n      }\n    })\n    .state('games.filepicker', {\n      parent: 'games',\n      url: '/filepicker/{fileType:string}',\n      data: {\n        authorities: ['ROLE_USER']\n      },\n      params: {\n        fileType: ''\n      },\n      onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n        $uibModal.open({\n          templateUrl: 'app/games/games-filepicker-dialog.html',\n          controller: 'GamesFilePickerController',\n          controllerAs: 'vm',\n          size: 'lg',\n          resolve: {\n            fileType: function() { return $stateParams.fileType; }\n          }\n        }).result.then(function(file) {\n          $state.go('games');\n        }, function() {\n          $state.go('^');\n        });\n      }]\n    });\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('visualizer2App')\n    .factory('Games', Games);\n\n  Games.$inject = ['$http'];\n\n  function Games ($http) {\n    var service = {\n      list: list,\n      boot: boot,\n      run: run,\n      replayInternal: replayInternal,\n      replayExternal: replayExternal,\n      close: close,\n      reset: reset\n    };\n    service.reset();\n\n    function reset () {\n      service.bootFile = null;\n      service.stateFile = null;\n      service.seedFile = null;\n      service.configFile = null;\n      service.weatherFile = null;\n    }\n\n    function list (success, error) {\n      console.log('Fetching list');\n      $http.get('api/mygames', httpOpts).then(success, error);\n    }\n\n    function boot (game, overwrite, success, error) {\n      console.log('Starting boot');\n      $http.post('api/bootgame?overwrite=' + overwrite, game).then(success, error);\n    }\n\n    function run (game, overwrite, success, error) {\n      console.log('Starting game');\n      $http.post('api/simgame?overwrite=' + overwrite, game).then(success, error);\n    }\n\n    function replayInternal (file, success, error) {\n      console.log('Starting replay internal');\n      $http.post('api/replaygame_internal', file).then(success, error);\n    }\n\n\n    function replayExternal (file, success, error) {\n      console.log('Starting replay external');\n      $http.post('api/replaygame_external', file).then(success, error);\n    }\n\n    function close (success, error) {\n      console.log('Closing game');\n      $http.post('api/closegame').then(success, error);\n    }\n\n    return service;\n\n\n    var httpOpts = {\n      transformResponse: function (data) {\n        data = angular.fromJson(data);\n        data.date = DateUtils.convertDateTimeFromServer(data.date);\n        return data;\n      }\n    };\n  }\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('visualizer2App')\n    .controller('GamesController', GamesController);\n\n  GamesController.$inject = ['$log', 'AlertService', 'State', 'Games'];\n\n  function GamesController ($log, AlertService, State, Games) {\n    var vm = this;\n\n    vm.setMode = setMode;\n    vm.setGameName = setGameName;\n    vm.addBroker = addBroker;\n    vm.removeBroker = removeBroker;\n    vm.getFile = getFile;\n    vm.clearFile = clearFile;\n    vm.setSource = setSource;\n    vm.setReplayUrl = setReplayUrl;\n    vm.start = start;\n    vm.stop = stop;\n    vm.isStartButtonDisabled = isStartButtonDisabled;\n    vm.isStopButtonDisabled = isStopButtonDisabled;\n    vm.state = State;\n\n    setMode('');\n\n    function setMode (mode) {\n      vm.mode = mode;\n      vm.gameName = '';\n      vm.gameNameTemp = '';\n      vm.overwrite = false;\n      vm.brokerNames = '';\n      vm.brokers = {};\n      vm.brokerCollection = [];\n      vm.games = [];\n      setSource(null);\n\n      Games.reset();\n    }\n\n    function setGameName (name) {\n      if (name === undefined) {\n        vm.gameName = vm.gameNameTemp;\n      } else {\n        vm.gameName = vm.gameNameTemp = name;\n      }\n    }\n\n    function addBroker (name) {\n      if (!vm.brokers.hasOwnProperty(name)) {\n        vm.brokers[name] = true;\n        vm.brokerName = null;\n        vm.brokerCollection = Object.keys(vm.brokers);\n      } else {\n        AlertService.error('Broker ' + name + ' was already added');\n      }\n    }\n\n    function removeBroker (name) {\n      if (vm.brokers.hasOwnProperty(name)) {\n        delete vm.brokers[name];\n        vm.brokerCollection = Object.keys(vm.brokers);\n      } else {\n        AlertService.error('Broker ' + name + ' was not added');\n      }\n    }\n\n    function getFile (type) {\n      return Games[type + 'File'];\n    }\n\n    function clearFile (type) {\n      return Games[type + 'File'] = null;\n    }\n\n    function setSource (source) {\n      vm.replaySource = source;\n      vm.replayUrl = '';\n      vm.replayUrlTemp = '';\n      vm.replayGame = null;\n    }\n\n    function setReplayUrl (url) {\n      if (url === undefined) {\n        vm.replayUrl = vm.replayUrlTemp;\n      } else {\n        vm.replayUrl = vm.replayUrlTemp = url;\n      }\n    }\n\n    function start () {\n      if (vm.mode === 'BOOT') {\n        startBoot();\n      } else if (vm.mode === 'SIM') {\n        startSim();\n      } else if (vm.mode === 'REPLAY') {\n        startReplay();\n      } else {\n        $log.error('Unknown game mode selected: ' + vm.mode);\n      }\n    }\n\n    function stop () {\n      if (State.gameStatus === 'RUNNING' || State.gameStatus === 'WAITING') {\n        stopGame();\n      } else {\n        $log.error('Can\\'t stop game, doesn\\'t seem to be anything running');\n      }\n    }\n\n    function isStartButtonDisabled () {\n      return !isGameValid() || !State.gameStatus || State.gameStatus === 'RUNNING' || State.gameStatus === 'OFFLINE';\n    }\n\n    function isStopButtonDisabled () {\n      return State.gameStatus !== 'RUNNING' && State.gameStatus !== 'WAITING';\n    }\n\n    // HELPER FUNCTIONS\n\n    function isGameValid () {\n      if (!vm.mode) {\n        return false;\n      } else if (vm.mode === 'SIM' && vm.gameName && Games.bootFile && vm.brokerCollection.length > 0) {\n        return true;\n      } else if (vm.mode === 'BOOT' && vm.gameName) {\n        return true;\n      } else if (vm.mode === 'REPLAY' && vm.replaySource && (Games.stateFile || vm.replayUrl)) {\n        return true;\n      }\n      return false;\n    }\n\n    function startBoot () {\n      vm.setGameName();\n      var game = {\n        id: null,\n        name: vm.gameName,\n        type: 'BOOT',\n        shared: false,\n        completed: false,\n        seedFile : Games.seedFile,\n        configFile : Games.configFile,\n        weatherFile : Games.weatherFile\n      };\n      Games.boot(game, vm.overwrite,\n        function () {\n          setMode('');\n        },\n        function (error) {\n          console.log('Failed boot', error);\n        }\n      );\n    }\n\n    function startSim () {\n      vm.setGameName();\n      var game = {\n        id: null,\n        name: vm.gameName,\n        type: 'SIM',\n        shared: false,\n        completed: false,\n        bootFile : Games.bootFile,\n        seedFile : Games.seedFile,\n        configFile : Games.configFile,\n        weatherFile : Games.weatherFile,\n        brokers: vm.brokerCollection.join(',')\n      };\n      Games.run(game, vm.overwrite,\n        function () {\n          setMode('');\n        },\n        function (error) {\n          console.log('Failed sim', error);\n        }\n      );\n    }\n\n    function startReplay () {\n      if  (vm.replaySource === 'EXTERNAL') {\n        Games.replayExternal(vm.replayUrl,\n            function () {\n              setMode('');\n            },\n            function (error) {\n              console.error('Failed replay', error);\n            }\n        );\n      } else {\n        Games.replayInternal(Games.stateFile,\n            function () {\n              setMode('');\n            },\n            function (error) {\n              console.error('Failed replay', error);\n            }\n        );\n      }\n    }\n\n    function stopGame () {\n      Games.close(\n          function() {\n            setMode('');\n            setSource('');\n          },\n          function (error) {\n            console.error('Failed stop', error);\n          }\n      );\n    }\n  }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('files', {\n            parent: 'app',\n            url: '/files',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Files'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/files/files.html',\n                    controller: 'FilesController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Files', Files);\n\n    Files.$inject = ['$resource'];\n\n    function Files ($resource) {\n        var service = $resource('api/myfiles/:type\\\\/', {}, {\n            'query': {\n                method: 'GET',\n                params: { type: '@type' },\n                isArray: true\n            },\n            'upload': {\n                method: 'POST',\n                params: { type: '@type' },\n                transformRequest: function (data) {\n                    if (data === undefined) {\n                      return data;\n                    }\n                    var fd = new FormData();\n                    angular.forEach(data, function (value, key) {\n                        if (value instanceof FileList) {\n                            if (value.length === 1) {\n                                fd.append(key, value[0]);\n                            } else {\n                                angular.forEach(value, function (file, index) {\n                                    fd.append(key + '_' + index, file);\n                                });\n                            }\n                        } else {\n                            fd.append(key, value);\n                        }\n                    });\n                    return fd;\n                },\n                headers: {\n                    'Content-Type': undefined\n                }\n            }\n        })\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FilesController', FilesController);\n\n    FilesController.$inject = ['$window', 'AlertService', 'File', 'Files'];\n\n    function FilesController ($window, AlertService, File, Files) {\n        var vm = this;\n        vm.refreshFiles = refreshFiles; // TODO push changes via websockets?\n        vm.resetUpload = resetUpload;\n        vm.doUpload = doUpload;\n        vm.doDownload = doDownload;\n        vm.doDelete = doDelete;\n\n        vm.itemsPerPage = 10;\n\n        vm.refreshFiles();\n        vm.resetUpload();\n\n        function refreshFiles () {\n            vm.filesCollection = Files.query({type:'any'});\n        }\n\n        function resetUpload () {\n            vm.uploadFile = null;\n            vm.uploadShared = false;\n            vm.uploadOverwrite = false;\n            vm.uploadType = '';\n        }\n\n        function doUpload () {\n            Files.upload({\n                file: vm.uploadFile,\n                type: vm.uploadType,\n                shared: vm.uploadShared,\n                overwrite: vm.uploadOverwrite\n            }, function() {\n                angular.element('#fileForm')[0].reset();\n                vm.resetUpload();\n                vm.refreshFiles();\n            }, function(err) {\n                AlertService.error('Error: ' + err.data.message + ' (' + err.status + ' ' + err.statusText + ')');\n            });\n        }\n\n        function doDelete (id) {\n            File.delete({id: id}, function() {\n                vm.refreshFiles();\n            });\n        }\n\n        function doDownload (type, id) {\n            $window.location = 'api/myfiles/' + type.toLowerCase() + '/' + id;\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewDialogController', ViewDialogController);\n\n    ViewDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'View', 'User', 'Chart'];\n\n    function ViewDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, View, User, Chart) {\n        var vm = this;\n\n        vm.view = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n        vm.charts = Chart.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.view.id !== null) {\n                View.update(vm.view, onSaveSuccess, onSaveError);\n            } else {\n                View.save(vm.view, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:viewUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewDetailController', ViewDetailController);\n\n    ViewDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'View', 'User', 'Chart'];\n\n    function ViewDetailController($scope, $rootScope, $stateParams, previousState, entity, View, User, Chart) {\n        var vm = this;\n\n        vm.view = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:viewUpdate', function(event, result) {\n            vm.view = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewDeleteController',ViewDeleteController);\n\n    ViewDeleteController.$inject = ['$uibModalInstance', 'entity', 'View'];\n\n    function ViewDeleteController($uibModalInstance, entity, View) {\n        var vm = this;\n\n        vm.view = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            View.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('view', {\n            parent: 'entity',\n            url: '/view?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Views'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/view/views.html',\n                    controller: 'ViewController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('view-detail', {\n            parent: 'view',\n            url: '/view/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'View'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/view/view-detail.html',\n                    controller: 'ViewDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'View', function($stateParams, View) {\n                    return View.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'view',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('view-detail.edit', {\n            parent: 'view-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-dialog.html',\n                    controller: 'ViewDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['View', function(View) {\n                            return View.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('view.new', {\n            parent: 'view',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-dialog.html',\n                    controller: 'ViewDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                graphs: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('view', null, { reload: 'view' });\n                }, function() {\n                    $state.go('view');\n                });\n            }]\n        })\n        .state('view.edit', {\n            parent: 'view',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-dialog.html',\n                    controller: 'ViewDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['View', function(View) {\n                            return View.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('view', null, { reload: 'view' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('view.delete', {\n            parent: 'view',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/view/view-delete-dialog.html',\n                    controller: 'ViewDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['View', function(View) {\n                            return View.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('view', null, { reload: 'view' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('View', View);\n\n    View.$inject = ['$resource'];\n\n    function View ($resource) {\n        var resourceUrl =  'api/views/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ViewController', ViewController);\n\n    ViewController.$inject = ['View', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function ViewController(View, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            View.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.views = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphDialogController', GraphDialogController);\n\n    GraphDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Graph', 'User'];\n\n    function GraphDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Graph, User) {\n        var vm = this;\n\n        vm.graph = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.graph.id !== null) {\n                Graph.update(vm.graph, onSaveSuccess, onSaveError);\n            } else {\n                Graph.save(vm.graph, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:graphUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphDetailController', GraphDetailController);\n\n    GraphDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Graph', 'User'];\n\n    function GraphDetailController($scope, $rootScope, $stateParams, previousState, entity, Graph, User) {\n        var vm = this;\n\n        vm.graph = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:graphUpdate', function(event, result) {\n            vm.graph = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphDeleteController',GraphDeleteController);\n\n    GraphDeleteController.$inject = ['$uibModalInstance', 'entity', 'Graph'];\n\n    function GraphDeleteController($uibModalInstance, entity, Graph) {\n        var vm = this;\n\n        vm.graph = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Graph.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('graph', {\n            parent: 'entity',\n            url: '/graph?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Graphs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/graph/graphs.html',\n                    controller: 'GraphController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('graph-detail', {\n            parent: 'graph',\n            url: '/graph/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Graph'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/graph/graph-detail.html',\n                    controller: 'GraphDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Graph', function($stateParams, Graph) {\n                    return Graph.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'graph',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('graph-detail.edit', {\n            parent: 'graph-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-dialog.html',\n                    controller: 'GraphDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Graph', function(Graph) {\n                            return Graph.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('graph.new', {\n            parent: 'graph',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-dialog.html',\n                    controller: 'GraphDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                type: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('graph', null, { reload: 'graph' });\n                }, function() {\n                    $state.go('graph');\n                });\n            }]\n        })\n        .state('graph.edit', {\n            parent: 'graph',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-dialog.html',\n                    controller: 'GraphDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Graph', function(Graph) {\n                            return Graph.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('graph', null, { reload: 'graph' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('graph.delete', {\n            parent: 'graph',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/graph/graph-delete-dialog.html',\n                    controller: 'GraphDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Graph', function(Graph) {\n                            return Graph.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('graph', null, { reload: 'graph' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('Graph', Graph);\n\n    Graph.$inject = ['$resource'];\n\n    function Graph ($resource) {\n        var resourceUrl =  'api/graphs/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GraphController', GraphController);\n\n    GraphController.$inject = ['Graph', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function GraphController(Graph, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Graph.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.graphs = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameDialogController', GameDialogController);\n\n    GameDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Game', 'User', 'File'];\n\n    function GameDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Game, User, File) {\n        var vm = this;\n\n        vm.game = entity;\n        vm.clear = clear;\n        vm.datePickerOpenStatus = {};\n        vm.openCalendar = openCalendar;\n        vm.save = save;\n        vm.users = User.query();\n        vm.files = File.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.game.id !== null) {\n                Game.update(vm.game, onSaveSuccess, onSaveError);\n            } else {\n                Game.save(vm.game, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:gameUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        vm.datePickerOpenStatus.date = false;\n\n        function openCalendar (date) {\n            vm.datePickerOpenStatus[date] = true;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameDetailController', GameDetailController);\n\n    GameDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Game', 'User', 'File'];\n\n    function GameDetailController($scope, $rootScope, $stateParams, previousState, entity, Game, User, File) {\n        var vm = this;\n\n        vm.game = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:gameUpdate', function(event, result) {\n            vm.game = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameDeleteController',GameDeleteController);\n\n    GameDeleteController.$inject = ['$uibModalInstance', 'entity', 'Game'];\n\n    function GameDeleteController($uibModalInstance, entity, Game) {\n        var vm = this;\n\n        vm.game = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Game.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('game', {\n            parent: 'entity',\n            url: '/game?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Games'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/game/games.html',\n                    controller: 'GameController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('game-detail', {\n            parent: 'game',\n            url: '/game/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Game'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/game/game-detail.html',\n                    controller: 'GameDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Game', function($stateParams, Game) {\n                    return Game.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'game',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('game-detail.edit', {\n            parent: 'game-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-dialog.html',\n                    controller: 'GameDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Game', function(Game) {\n                            return Game.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('game.new', {\n            parent: 'game',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-dialog.html',\n                    controller: 'GameDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                type: null,\n                                name: null,\n                                shared: false,\n                                date: null,\n                                brokers: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('game', null, { reload: 'game' });\n                }, function() {\n                    $state.go('game');\n                });\n            }]\n        })\n        .state('game.edit', {\n            parent: 'game',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-dialog.html',\n                    controller: 'GameDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Game', function(Game) {\n                            return Game.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('game', null, { reload: 'game' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('game.delete', {\n            parent: 'game',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/game/game-delete-dialog.html',\n                    controller: 'GameDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Game', function(Game) {\n                            return Game.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('game', null, { reload: 'game' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('Game', Game);\n\n    Game.$inject = ['$resource', 'DateUtils'];\n\n    function Game ($resource, DateUtils) {\n        var resourceUrl =  'api/games/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                        data.date = DateUtils.convertDateTimeFromServer(data.date);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('GameController', GameController);\n\n    GameController.$inject = ['Game', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function GameController(Game, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Game.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.games = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileDialogController', FileDialogController);\n\n    FileDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'File', 'User'];\n\n    function FileDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, File, User) {\n        var vm = this;\n\n        vm.file = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.file.id !== null) {\n                File.update(vm.file, onSaveSuccess, onSaveError);\n            } else {\n                File.save(vm.file, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:fileUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileDetailController', FileDetailController);\n\n    FileDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'File', 'User'];\n\n    function FileDetailController($scope, $rootScope, $stateParams, previousState, entity, File, User) {\n        var vm = this;\n\n        vm.file = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:fileUpdate', function(event, result) {\n            vm.file = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileDeleteController',FileDeleteController);\n\n    FileDeleteController.$inject = ['$uibModalInstance', 'entity', 'File'];\n\n    function FileDeleteController($uibModalInstance, entity, File) {\n        var vm = this;\n\n        vm.file = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            File.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('file', {\n            parent: 'entity',\n            url: '/file?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Files'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/file/files.html',\n                    controller: 'FileController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('file-detail', {\n            parent: 'file',\n            url: '/file/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'File'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/file/file-detail.html',\n                    controller: 'FileDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'File', function($stateParams, File) {\n                    return File.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'file',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('file-detail.edit', {\n            parent: 'file-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-dialog.html',\n                    controller: 'FileDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['File', function(File) {\n                            return File.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('file.new', {\n            parent: 'file',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-dialog.html',\n                    controller: 'FileDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                type: null,\n                                name: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('file', null, { reload: 'file' });\n                }, function() {\n                    $state.go('file');\n                });\n            }]\n        })\n        .state('file.edit', {\n            parent: 'file',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-dialog.html',\n                    controller: 'FileDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['File', function(File) {\n                            return File.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('file', null, { reload: 'file' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('file.delete', {\n            parent: 'file',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/file/file-delete-dialog.html',\n                    controller: 'FileDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['File', function(File) {\n                            return File.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('file', null, { reload: 'file' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('File', File);\n\n    File.$inject = ['$resource'];\n\n    function File ($resource) {\n        var resourceUrl =  'api/files/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('FileController', FileController);\n\n    FileController.$inject = ['File', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function FileController(File, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            File.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.files = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartDialogController', ChartDialogController);\n\n    ChartDialogController.$inject = ['$timeout', '$scope', '$stateParams', '$uibModalInstance', 'entity', 'Chart', 'User', 'Graph'];\n\n    function ChartDialogController ($timeout, $scope, $stateParams, $uibModalInstance, entity, Chart, User, Graph) {\n        var vm = this;\n\n        vm.chart = entity;\n        vm.clear = clear;\n        vm.save = save;\n        vm.users = User.query();\n        vm.graphs = Graph.query();\n\n        $timeout(function (){\n            angular.element('.form-group:eq(1)>input').focus();\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.chart.id !== null) {\n                Chart.update(vm.chart, onSaveSuccess, onSaveError);\n            } else {\n                Chart.save(vm.chart, onSaveSuccess, onSaveError);\n            }\n        }\n\n        function onSaveSuccess (result) {\n            $scope.$emit('visualizer2App:chartUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartDetailController', ChartDetailController);\n\n    ChartDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'previousState', 'entity', 'Chart', 'User', 'Graph'];\n\n    function ChartDetailController($scope, $rootScope, $stateParams, previousState, entity, Chart, User, Graph) {\n        var vm = this;\n\n        vm.chart = entity;\n        vm.previousState = previousState.name;\n\n        var unsubscribe = $rootScope.$on('visualizer2App:chartUpdate', function(event, result) {\n            vm.chart = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartDeleteController',ChartDeleteController);\n\n    ChartDeleteController.$inject = ['$uibModalInstance', 'entity', 'Chart'];\n\n    function ChartDeleteController($uibModalInstance, entity, Chart) {\n        var vm = this;\n\n        vm.chart = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (id) {\n            Chart.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('chart', {\n            parent: 'entity',\n            url: '/chart?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Charts'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/chart/charts.html',\n                    controller: 'ChartController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n            }\n        })\n        .state('chart-detail', {\n            parent: 'chart',\n            url: '/chart/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Chart'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/chart/chart-detail.html',\n                    controller: 'ChartDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                entity: ['$stateParams', 'Chart', function($stateParams, Chart) {\n                    return Chart.get({id : $stateParams.id}).$promise;\n                }],\n                previousState: [\"$state\", function ($state) {\n                    var currentStateData = {\n                        name: $state.current.name || 'chart',\n                        params: $state.params,\n                        url: $state.href($state.current.name, $state.params)\n                    };\n                    return currentStateData;\n                }]\n            }\n        })\n        .state('chart-detail.edit', {\n            parent: 'chart-detail',\n            url: '/detail/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-dialog.html',\n                    controller: 'ChartDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Chart', function(Chart) {\n                            return Chart.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('^', {}, { reload: false });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('chart.new', {\n            parent: 'chart',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-dialog.html',\n                    controller: 'ChartDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                name: null,\n                                shared: false,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('chart', null, { reload: 'chart' });\n                }, function() {\n                    $state.go('chart');\n                });\n            }]\n        })\n        .state('chart.edit', {\n            parent: 'chart',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-dialog.html',\n                    controller: 'ChartDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Chart', function(Chart) {\n                            return Chart.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('chart', null, { reload: 'chart' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('chart.delete', {\n            parent: 'chart',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/chart/chart-delete-dialog.html',\n                    controller: 'ChartDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Chart', function(Chart) {\n                            return Chart.get({id : $stateParams.id}).$promise;\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('chart', null, { reload: 'chart' });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n\n(function() {\n    'use strict';\n    angular\n        .module('visualizer2App')\n        .factory('Chart', Chart);\n\n    Chart.$inject = ['$resource'];\n\n    function Chart ($resource) {\n        var resourceUrl =  'api/charts/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    if (data) {\n                        data = angular.fromJson(data);\n                    }\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ChartController', ChartController);\n\n    ChartController.$inject = ['Chart', 'ParseLinks', 'AlertService', 'paginationConstants', 'pagingParams'];\n\n    function ChartController(Chart, ParseLinks, AlertService, paginationConstants, pagingParams) {\n\n        var vm = this;\n\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n\n        loadAll();\n\n        function loadAll () {\n            Chart.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.charts = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage(page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition() {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .filter('characters', characters);\n\n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n\n(function(){\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse(header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function(p) {\n                var section = p.split('>;');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \">;\"');\n                }\n                var url = section[0].replace(/<(.*)/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if (angular.isString(page)) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n            return links;\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page - 1) * $ctrl.itemsPerPage) == 0 ? 1 : (($ctrl.page - 1) * $ctrl.itemsPerPage + 1)}} - ' +\n                    '{{($ctrl.page * $ctrl.itemsPerPage) < $ctrl.queryCount ? ($ctrl.page * $ctrl.itemsPerPage) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total',\n            itemsPerPage: '<'\n        }\n    };\n\n    angular\n        .module('visualizer2App')\n        .component('jhiItemCount', jhiItemCount);\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils($filter) {\n\n        var service = {\n            convertDateTimeFromServer: convertDateTimeFromServer,\n            convertLocalDateFromServer: convertLocalDateFromServer,\n            convertLocalDateToServer: convertLocalDateToServer,\n            dateformat: dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer(date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer(date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer(date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat() {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n                input = input.substring(0, 1).toUpperCase() + input.substring(1);\n            }\n            return input;\n        }\n    }\n})();\n\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3,\n                enc1, enc2, enc3, enc4,\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n            }\n\n            return output;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm'\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope, $state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = false;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('#username').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: false\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                if ($state.current.name === 'register' || $state.current.name === 'activate' ||\n                    $state.current.name === 'finishReset' || $state.current.name === 'requestReset') {\n                    $state.go('home');\n                }\n\n                $rootScope.$broadcast('authenticationSuccess');\n\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                if (Auth.getPreviousState()) {\n                    var previousState = Auth.getPreviousState();\n                    Auth.resetPreviousState();\n                    $state.go(previousState.name, previousState.params);\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, formCtrl) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        var inputName = $input.attr('name');\n                        scope.$watch(function() {\n                            return formCtrl[inputName].$invalid && formCtrl[inputName].$dirty;\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n\n    angular\n        .module('visualizer2App')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: message,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('visualizer2App.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var headers = Object.keys(httpResponse.headers()).filter(function (header) {\n                    return header.indexOf('app-error', header.length - 'app-error'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n                }).sort();\n                var errorHeader = httpResponse.headers(headers[0]);\n                var entityKey = httpResponse.headers(headers[1]);\n                if (errorHeader) {\n                    var entityName = entityKey;\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            case 404:\n                addErrorAlert('Not found','error.url.not.found');\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce'];\n\n        function getService ($timeout, $sce) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 10000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\" role=\"alert\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre ng-bind-html=\"alert.msg\"></pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('visualizer2App')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var headers = Object.keys(response.headers()).filter(function (header) {\n                return header.indexOf('app-alert', header.length - 'app-alert'.length) !== -1 || header.indexOf('app-params', header.length - 'app-params'.length) !== -1;\n            }).sort();\n            var alertKey = response.headers(headers[0]);\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers(headers[1])});\n            }\n            return response;\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || (response.data.path && response.data.path.indexOf('/api/account') === 0 )))) {\n                $rootScope.$emit('visualizer2App.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            // If we have an unauthorized request we redirect to the login page\n            // Don't do this check on the account API to avoid infinite loop\n            if (response.status === 401 && angular.isDefined(response.data.path) && response.data.path.indexOf('/api/account') === -1) {\n                var Auth = $injector.get('Auth');\n                var to = $rootScope.toState;\n                var params = $rootScope.toStateParams;\n                Auth.logout();\n                if (to.name !== 'accessdenied') {\n                    Auth.storePreviousState(to.name, params);\n                }\n                var LoginService = $injector.get('LoginService');\n                LoginService.open();\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$sessionStorage',  '$window',\n                          'Auth', 'Principal', 'VERSION', 'CONFIG', 'DEBUG_INFO_ENABLED'];\n\n    function stateHandler($rootScope, $state, $sessionStorage,  $window,\n                          Auth, Principal, VERSION, CONFIG, DEBUG_INFO_ENABLED) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.VERSION = VERSION;\n            $rootScope.CONFIG = CONFIG;\n            $rootScope.DEBUG_INFO_ENABLED = DEBUG_INFO_ENABLED;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams, fromState) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n                $rootScope.fromState = fromState;\n\n                // Redirect to a state with an external URL (http://stackoverflow.com/a/30221248/1098564)\n                if (toState.external) {\n                    event.preventDefault();\n                    $window.open(toState.url, '_self');\n                }\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'visualizer2' ;\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                $window.document.title = titleKey;\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n        }\n    }\n})();\n\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(paginationConfig);\n\n    paginationConfig.$inject = ['uibPaginationConfig', 'paginationConstants'];\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(pagerConfig);\n\n    pagerConfig.$inject = ['uibPagerConfig', 'paginationConstants'];\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n    function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n        $sessionStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider','DEBUG_INFO_ENABLED'];\n\n    function compileServiceConfig($compileProvider,DEBUG_INFO_ENABLED) {\n        // disable debug data on prod profile to improve performance\n        $compileProvider.debugInfoEnabled(DEBUG_INFO_ENABLED);\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ]\n            }\n        });\n    }\n})();\n\n(function () {\n    'use strict';\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular\n        .module('visualizer2App')\n        .constant('VERSION', \"1.9.1\")\n        .constant('DEBUG_INFO_ENABLED', false)\n        .constant('CONFIG', {\n\t\"mode\": \"research\"\n})\n;\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                vm.user.langKey = 'en';\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management?page&sort',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Users'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                }\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort)\n                    };\n                }]\n            }        })\n        .state('user-management.new', {\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management-detail', {\n            parent: 'user-management',\n            url: '/user/{login}',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'visualizer2'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            }\n        })\n        .state('user-management.delete', {\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'AlertService', '$state', 'pagingParams', 'paginationConstants'];\n\n    function UserManagementController(Principal, User, ParseLinks, AlertService, $state, pagingParams, paginationConstants) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.loadAll = loadAll;\n        vm.setActive = setActive;\n        vm.users = [];\n        vm.page = 1;\n        vm.totalItems = null;\n        vm.clear = clear;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.itemsPerPage = paginationConstants.itemsPerPage;\n        vm.transition = transition;\n\n        vm.loadAll();\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function loadAll () {\n            User.query({\n                page: pagingParams.page - 1,\n                size: vm.itemsPerPage,\n                sort: sort()\n            }, onSuccess, onError);\n        }\n\n        function onSuccess(data, headers) {\n            vm.links = ParseLinks.parse(headers('link'));\n            vm.totalItems = headers('X-Total-Count');\n            vm.queryCount = vm.totalItems;\n            vm.page = pagingParams.page;\n            vm.users = data;\n        }\n\n        function onError(error) {\n            AlertService.error(error.data.message);\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n        }\n\n        function sort () {\n            var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n            if (vm.predicate !== 'id') {\n                result.push('id');\n            }\n            return result;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-tracker', {\n            parent: 'admin',\n            url: '/tracker',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Real-time user activities'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/tracker/tracker.html',\n                    controller: 'JhiTrackerController',\n                    controllerAs: 'vm'\n                }\n            },\n            onEnter: ['JhiTrackerService', function(JhiTrackerService) {\n                JhiTrackerService.subscribe();\n            }],\n            onExit: ['JhiTrackerService', function(JhiTrackerService) {\n                JhiTrackerService.unsubscribe();\n            }]\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n    /* globals SockJS, Stomp */\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiTrackerService', JhiTrackerService);\n\n    JhiTrackerService.$inject = ['$rootScope', '$window', '$cookies', '$http', '$q'];\n\n    function JhiTrackerService ($rootScope, $window, $cookies, $http, $q) {\n        var stompClient = null;\n        var subscriber = null;\n        var listener = $q.defer();\n        var connected = $q.defer();\n        var alreadyConnectedOnce = false;\n\n        var service = {\n            connect: connect,\n            disconnect: disconnect,\n            receive: receive,\n            sendActivity: sendActivity,\n            subscribe: subscribe,\n            unsubscribe: unsubscribe\n        };\n\n        return service;\n\n        function connect () {\n            //building absolute path so that websocket doesnt fail when deploying with a context path\n            var loc = $window.location;\n            var url = '//' + loc.host + loc.pathname + 'websocket/tracker';\n            var socket = new SockJS(url);\n            stompClient = Stomp.over(socket);\n            var stateChangeStart;\n            var headers = {};\n            headers[$http.defaults.xsrfHeaderName] = $cookies.get($http.defaults.xsrfCookieName);\n            stompClient.connect(headers, function() {\n                connected.resolve('success');\n                sendActivity();\n                if (!alreadyConnectedOnce) {\n                    stateChangeStart = $rootScope.$on('$stateChangeStart', function () {\n                        sendActivity();\n                    });\n                    alreadyConnectedOnce = true;\n                }\n            });\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n            });\n        }\n\n        function disconnect () {\n            if (stompClient !== null) {\n                stompClient.disconnect();\n                stompClient = null;\n            }\n        }\n\n        function receive () {\n            return listener.promise;\n        }\n\n        function sendActivity() {\n            if (stompClient !== null && stompClient.connected) {\n                stompClient\n                    .send('/topic/activity',\n                    {},\n                    angular.toJson({'page': $rootScope.toState.name}));\n            }\n        }\n\n        function subscribe () {\n            connected.promise.then(function() {\n                subscriber = stompClient.subscribe('/topic/tracker', function(data) {\n                    listener.notify(angular.fromJson(data.body));\n                });\n            }, null, null);\n        }\n\n        function unsubscribe () {\n            if (subscriber !== null) {\n                subscriber.unsubscribe();\n            }\n            listener = $q.defer();\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiTrackerController', JhiTrackerController);\n\n    JhiTrackerController.$inject = ['$cookies', '$http', 'JhiTrackerService'];\n\n    function JhiTrackerController ($cookies, $http, JhiTrackerService) {\n        // This controller uses a Websocket connection to receive user activities in real-time.\n        var vm = this;\n\n        vm.activities = [];\n\n        JhiTrackerService.receive().then(null, null, function(activity) {\n            showActivity(activity);\n        });\n\n        function showActivity(activity) {\n            var existingActivity = false;\n            for (var index = 0; index < vm.activities.length; index++) {\n                if(vm.activities[index].sessionId === activity.sessionId) {\n                    existingActivity = true;\n                    if (activity.page === 'logout') {\n                        vm.activities.splice(index, 1);\n                    } else {\n                        vm.activities[index] = activity;\n                    }\n                }\n            }\n            if (!existingActivity && (activity.page !== 'logout')) {\n                vm.activities.push(activity);\n            }\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Application Metrics'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('management/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('management/dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n            });\n\n            vm.cachesStats = {};\n            angular.forEach(newValue.gauges, function (value, key) {\n                if (key.indexOf('jcache.statistics') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(18),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Health Checks'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var separator = '.';\n        var service = {\n            checkHealth: checkHealth,\n            transformHealthData: transformHealthData,\n            getBaseName: getBaseName,\n            getSubSystemName: getSubSystemName\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('management/health').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            flattenHealthData(response, null, data);\n            return response;\n        }\n\n        function getBaseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function getSubSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        /* private methods */\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (isHealthObject(value)) {\n                    if (hasSubSystem(value)) {\n                        addHealthObject(result, false, value, getModuleName(path, key));\n                        flattenHealthData(result, getModuleName(path, key), value);\n                    } else {\n                        addHealthObject(result, true, value, getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular.module('visualizer2App')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.updatingHealth = true;\n        vm.getLabelClass = getLabelClass;\n        vm.refresh = refresh;\n        vm.showHealth = showHealth;\n        vm.baseName = JhiHealthService.getBaseName;\n        vm.subSystemName = JhiHealthService.getSubSystemName;\n\n        vm.refresh();\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = JhiHealthService.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  JhiHealthService.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Configuration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('management/configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('management/env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'Audits'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('management/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth'];\n\n    function SettingsController (Principal, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('sessions', {\n            parent: 'account',\n            url: '/sessions',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Sessions'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/sessions/sessions.html',\n                    controller: 'SessionsController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('SessionsController', SessionsController);\n\n    SessionsController.$inject = ['Sessions', 'Principal'];\n\n    function SessionsController (Sessions, Principal) {\n        var vm = this;\n\n        vm.account = null;\n        vm.error = null;\n        vm.invalidate = invalidate;\n        vm.sessions = Sessions.getAll();\n        vm.success = null;\n\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function invalidate (series) {\n            Sessions.delete({series: encodeURIComponent(series)},\n                function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                    vm.sessions = Sessions.getAll();\n                },\n                function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'Registration'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = [ '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('#login').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey =  'en' ;\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small>Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penalty (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penalty (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'Password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'Activation'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            }\n        });\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('visualizer2App')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n(function(){'use strict';angular.module('visualizer2App').run(['$templateCache', function($templateCache) {$templateCache.put('app/files/files.html','<div ng-cloak><form id=\"fileForm\" name=\"fileForm\" class=\"form-horizontal\"><fieldset><div class=\"form-group\"><label class=\"col-md-1\" for=\"fileUpload\">Upload:</label><div class=\"col-md-11 form-inline\"><input type=\"text\" disabled=\"\" class=\"form-control\" ng-model=\"vm.uploadFile.name\" placeholder=\"No file selected\"><file-field id=\"fileUpload\" class=\"btn btn-default\" ng-model=\"vm.uploadFile\">Browse</file-field><select class=\"form-control\" ng-model=\"vm.uploadType\" ng-show=\"vm.uploadFile != null\"><option value=\"\" disabled=\"disabled\">Select type</option><option value=\"boot\">BOOT</option><option value=\"state\">STATE</option><option value=\"seed\">SEED</option><option value=\"config\">CONFIG</option><option value=\"weather\">WEATHER</option></select> <label ng-show=\"vm.uploadFile != null && vm.uploadType\" class=\"btn btn-default\"><input type=\"checkbox\" ng-model=\"vm.uploadShared\" autocomplete=\"off\"> Shared</label> <label ng-show=\"vm.uploadFile != null && vm.uploadType\" class=\"btn btn-default\"><input type=\"checkbox\" ng-model=\"vm.uploadOverwrite\" autocomplete=\"off\"> Overwrite</label> <a class=\"btn btn-default\" href=\"\" ng-click=\"vm.doUpload()\" ng-show=\"vm.uploadFile != null && vm.uploadType\"><span class=\"glyphicon glyphicon-upload\"></span> <span class=\"hidden-sm\">Upload</span></a><p class=\"help-block\">Select a file from your local machine, indicate what type of file it is, and hit \"Upload\".</p></div></div></fieldset><fieldset><div class=\"form-group\"><label class=\"col-md-1\" for=\"fileNameFilter\">Download:</label><div class=\"col-md-11\"><table st-table=\"vm.displayedCollection\" st-safe-src=\"vm.filesCollection\" class=\"table table-striped\" ng-switch=\"vm.displayedCollection.length > 0\"><thead ng-switch-when=\"true\"><tr><th colspan=\"12\"><input st-search=\"\" class=\"form-control\" id=\"fileNameFilter\" type=\"text\" placeholder=\"filter (e.g \\'boot\\') from {{vm.displayedCollection.length}} files ...\"></th></tr><tr><th colspan=\"5\" st-sort=\"path\">Name</th><th colspan=\"1\">Type</th><th colspan=\"2\">Owner</th><th colspan=\"1\">Shared</th><th colspan=\"2\">Date</th><th colspan=\"1\">&nbsp;</th></tr></thead><tbody><tr ng-switch-when=\"false\"><td colspan=\"\" 12>No files available; use the Upload feature above.</td></tr><tr ng-repeat=\"row in vm.displayedCollection\" ng-switch-when=\"true\"><td colspan=\"5\">{{row.name}}</td><td colspan=\"1\">{{row.type}}</td><td colspan=\"2\">{{row.owner.login}}</td><td colspan=\"1\"><input type=\"checkbox\" disabled=\"disabled\" ng-checked=\"{{row.shared}}\"></td><td colspan=\"2\">{{row.date | date : \\'MMM d, y H:mm:ss\\'}}</td><td colspan=\"1\"><a class=\"btn btn-default\" href=\"\" ng-click=\"vm.doDownload(row.type, row.id)\"><span class=\"glyphicon glyphicon-download\"></span> <span class=\"hidden-sm\">Download</span></a></td></tr></tbody><tfoot><tr><td colspan=\"12\" class=\"text-center\"><div st-pagination=\"3\" st-items-by-page=\"vm.itemsPerPage\" st-displayed-pages=\"7\"></div></td></tr></tfoot></table><a class=\"btn btn-default\" ng-click=\"vm.refreshFiles()\">Refresh <i class=\"glyphicon glyphicon-refresh\"></i></a></div></div></fieldset></form><br><jhi-alert></jhi-alert></div>');\n$templateCache.put('app/games/games-filepicker-dialog.html','<form name=\"filepickForm\" ng-submit=\"vm.submit()\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Pick the {{vm.fileType}} file</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Please pick the {{vm.fileType}} file you wish to use:</p><table st-table=\"vm.displayedCollection\" st-safe-src=\"vm.filesCollection\" class=\"table table-striped\"><thead><tr><th colspan=\"12\"><input st-search=\"\" class=\"form-control\" id=\"fileNameFilter\" type=\"text\" placeholder=\"filter {{vm.displayedCollection.length}} files ...\"></th></tr><tr><th colspan=\"7\" st-sort=\"path\">Name <a href=\"\" ng-click=\"vm.refresh()\"><i class=\"glyphicon glyphicon-refresh\"></i></a></th><th colspan=\"4\">Owner</th><th colspan=\"1\">Shared</th></tr></thead><tbody><tr ng-if=\"vm.displayedCollection.length === 0\"><td colspan=\"\" 12>No {{vm.fileType}} files available; upload using the <a class=\"alert-link\" ui-sref=\"files\" ng-click=\"vm.cancel()\">Files</a> tab.</td></tr><tr st-select-row=\"row\" ng-repeat=\"row in vm.displayedCollection\" ng-click=\"vm.select(row)\"><td colspan=\"7\">{{row.name}}</td><td colspan=\"4\">{{row.owner.login}}</td><td colspan=\"1\"><input type=\"checkbox\" disabled=\"disabled\" ng-checked=\"{{row.shared}}\"></td></tr></tbody><tfoot><tr><td colspan=\"12\" class=\"text-center\"><div st-pagination=\"3\" st-items-by-page=\"vm.itemsPerPage\" st-displayed-pages=\"7\"></div></td></tr></tfoot></table></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"vm.selected == null\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-ok-circle\"></span>&nbsp;<span>Pick</span></button></div></form>');\n$templateCache.put('app/games/games.html','<div ng-cloak><p class=\"\">Game status: <a ui-sref=\"graphs\" class=\"label label-{{vm.state.gameStatusStyle}}\">{{vm.state.gameStatus || \\'(loading...)\\'}}</a></p><div ng-switch=\"vm.state.gameStatus\"><div ng-switch-when=\"RUNNING\"><p>Game <i>{{vm.state.gameName}}</i> is currently running -- You can view its progress <a class=\"alert-link\" ui-sref=\"graphs\">Graphs</a> pages.</p></div><div ng-switch-when=\"WAITING\"><p>Game <i>{{vm.state.gameName}}</i> is currently waiting for brokers to connect.</p></div><div ng-switch-when=\"FAILED\"><p>Oops, something has gone wrong! Check the console for more info.</p></div><div ng-switch-default><h2>Create New Game</h2><br><form name=\"newGameForm\" class=\"form-horizontal\"><fieldset><div class=\"form-group\"><label class=\"col-md-3\">Select the kind of game you want:</label><div class=\"col-md-9\"><div class=\"radio radio-primary\"><label><input type=\"radio\" ng-click=\"vm.setMode(\\'BOOT\\')\" ng-checked=\"vm.mode === \\'BOOT\\'\"> I want to run a bootstrap game so I can use its output file for a simulation game.</label></div><div class=\"radio radio-primary\"><label><input type=\"radio\" ng-click=\"vm.setMode(\\'SIM\\')\" ng-checked=\"vm.mode === \\'SIM\\'\"> I want to run a simulation game with brokers.</label></div><div class=\"radio radio-primary\"><label><input type=\"radio\" ng-click=\"vm.setMode(\\'REPLAY\\')\" ng-checked=\"vm.mode === \\'REPLAY\\'\"> I want to replay an old game from its state log.</label></div></div></div><div class=\"form-group\" ng-show=\"vm.mode === \\'SIM\\' || vm.mode === \\'BOOT\\'\"><br><label class=\"col-md-3\">Enter game name (required):</label><div class=\"col-md-9\"><div class=\"form-inline\"><input class=\"form-control\" id=\"gameName\" ng-model=\"vm.gameNameTemp\" placeholder=\"Enter game name ...\" ng-keyup=\"$event.keyCode === 13 && vm.setGameName(vm.gameNameTemp)\" ng-blur=\"vm.setGameName(vm.gameNameTemp)\"> <span ng-switch=\"vm.gameName.length > 0\"><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-disabled=\"!vm.gameNameTemp\" ng-click=\"vm.setGameName()\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Set</span></button> </span><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.setGameName(\\'\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div><div class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"vm.overwrite\"> Overwrite if a game with this name already exists</label></div></div></div><div class=\"form-group\" ng-show=\"vm.mode === \\'SIM\\' && vm.gameName\"><br><label class=\"col-md-3\">Add brokers (at least 1 required):</label><div class=\"col-md-9\"><table><tbody><tr ng-repeat=\"broker in vm.brokerCollection\"><td class=\"form-inline\"><input class=\"form-control\" ng-disabled=\"true\" value=\"{{broker}}\"> <button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.removeBroker(broker)\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></td></tr><tr><td class=\"form-inline\"><input class=\"form-control\" id=\"brokerInput\" ng-model=\"vm.brokerName\" placeholder=\"Enter broker name ...\" ng-pattern=\"/^[a-zA-Z0-9\\\\\\\\-_]*$/\" ng-keyup=\"$event.keyCode === 13 && vm.brokerName && vm.addBroker(vm.brokerName)\"> <button type=\"button\" class=\"btn btn-default\" ng-disabled=\"!vm.brokerName\" ng-click=\"vm.addBroker(vm.brokerName)\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Add</span></button></td></tr></tbody></table></div></div><div ng-show=\"vm.mode === \\'SIM\\' && vm.brokerCollection.length\"><br><div class=\"form-group\"><label class=\"col-md-3\" for=\"bootFileInput\">Your boot file (required):</label><div class=\"col-md-8 form-inline\"><input id=\"bootFileInput\" class=\"form-control\" disabled=\"\" ng-model=\"vm.getFile(\\'boot\\').name\" placeholder=\"(No boot file selected)\"> <span ng-switch=\"vm.getFile(\\'boot\\') === null\"><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ui-sref=\"games.filepicker({fileType:\\'boot\\'})\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Pick</span></button> </span><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.clearFile(\\'boot\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div></div></div><div ng-show=\"vm.gameName && ((vm.mode === \\'BOOT\\') || (vm.mode === \\'SIM\\' && vm.getFile(\\'boot\\')))\"><br><div class=\"form-group\"><label class=\"col-md-3\" for=\"seedFileInput\">Seed file (optional):</label><div class=\"col-md-8 form-inline\"><input id=\"seedFileInput\" class=\"form-control\" disabled=\"\" ng-model=\"vm.getFile(\\'seed\\').name\" placeholder=\"(No seed file selected)\"> <span ng-switch=\"vm.getFile(\\'seed\\') === null\"><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ui-sref=\"games.filepicker({fileType:\\'seed\\'})\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Pick</span></button> </span><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.clearFile(\\'seed\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div></div><div class=\"form-group\"><label class=\"col-md-3\" for=\"configFileInput\">Configuration file (optional):</label><div class=\"col-md-8 form-inline\"><input id=\"configFileInput\" class=\"form-control\" disabled=\"\" ng-model=\"vm.getFile(\\'config\\').name\" placeholder=\"(No config file selected)\"> <span ng-switch=\"vm.getFile(\\'config\\') === null\"><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ui-sref=\"games.filepicker({fileType:\\'config\\'})\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Pick</span></button> </span><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.clearFile(\\'config\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div></div><div class=\"form-group\"><label class=\"col-md-3\" for=\"weatherFileInput\">Weather file (optional):</label><div class=\"col-md-8 form-inline\"><input id=\"weatherFileInput\" class=\"form-control\" disabled=\"\" ng-model=\"vm.getFile(\\'weather\\').name\" placeholder=\"(No weather file selected)\"> <span ng-switch=\"vm.getFile(\\'weather\\') === null\"><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ui-sref=\"games.filepicker({fileType:\\'weather\\'})\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Pick</span></button> </span><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.clearFile(\\'weather\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div></div></div><div ng-show=\"vm.mode === \\'REPLAY\\'\"><br><div class=\"form-group\"><label class=\"col-md-3\">Select the source for game replay:</label><div class=\"col-md-9\"><div class=\"radio radio-primary\"><label><input type=\"radio\" ng-click=\"vm.setSource(\\'INTERNAL\\')\" ng-checked=\"vm.replaySource === \\'INTERNAL\\'\"> I want to select an internal state file.</label></div><div class=\"radio radio-primary\"><label><input type=\"radio\" ng-click=\"vm.setSource(\\'EXTERNAL\\')\" ng-checked=\"vm.replaySource === \\'EXTERNAL\\'\"> I want to provide an URL to an external state file (archive).</label></div></div></div><div class=\"form-group\" ng-show=\"vm.replaySource === \\'INTERNAL\\'\"><br><label class=\"col-md-3\" for=\"stateFileInput\">Your state file (required):</label><div class=\"col-md-8 form-inline\"><input id=\"stateFileInput\" class=\"form-control\" disabled=\"\" ng-model=\"vm.getFile(\\'state\\').name\" placeholder=\"(No state file selected)\"> <span ng-switch=\"vm.getFile(\\'state\\') === null\"><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ui-sref=\"games.filepicker({fileType:\\'state\\'})\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Pick</span></button> </span><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.clearFile(\\'state\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div></div><div class=\"form-group\" ng-show=\"vm.replaySource === \\'EXTERNAL\\'\"><br><label class=\"col-md-3\" for=\"replayUrlInput\">The URL to your state file (required):</label><div class=\"col-md-9\"><div class=\"form-inline\"><input class=\"form-control\" id=\"replayUrlInput\" ng-model=\"vm.replayUrlTemp\" placeholder=\"Enter URL of state file (archive) ...\" style=\"width:80%\" ng-keyup=\"$event.keyCode === 13 && vm.setReplayUrl(vm.replayUrlTemp)\" ng-blur=\"vm.setReplayUrl(vm.replayUrlTemp)\"> <span ng-switch=\"vm.replayUrl.length > 0\"><span ng-switch-when=\"false\"><button type=\"button\" class=\"btn btn-default\" ng-disabled=\"!vm.replayUrlTemp\" ng-click=\"vm.setReplayUrl()\"><span class=\"glyphicon glyphicon-ok-circle\"></span> <span class=\"hidden-sm\">Set</span></button> </span><span ng-switch-when=\"true\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.setReplayUrl(\\'\\')\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm\">Clear</span></button></span></span></div></div></div></div><!-- Big bad start button --><br><button type=\"button\" class=\"btn btn-lg btn-block btn-raised btn-success\" ng-show=\"!vm.isStartButtonDisabled()\" ng-click=\"vm.start()\"><span>Start game</span></button></fieldset></form></div><!-- Big bad stop button --> <button type=\"button\" class=\"btn btn-lg btn-block btn-raised btn-danger\" ng-show=\"!vm.isStopButtonDisabled()\" ng-click=\"vm.stop()\"><span>Stop game</span></button></div><br><jhi-alert></jhi-alert><jhi-alert-error></jhi-alert-error></div>');\n$templateCache.put('app/graphs/graphs.html','<div ng-cloak><p class=\"\">Game status: <span class=\"label label-{{vm.state.gameStatusStyle}}\">{{vm.state.gameStatus || \\'(loading...)\\'}}</span></p><div ng-switch=\"vm.state.gameStatus\"><div ng-switch-when=\"IDLE\"><p>No game is currently running.</p><p ng-show=\"{{CONFIG.mode!==\\'tournament\\'}}\">You can start one in the <a class=\"alert-link\" ui-sref=\"games\">Games</a> tab.</p></div><div ng-switch-when=\"WAITING\"><p>Game <i>{{vm.state.gameName}}</i> is currently waiting for brokers to connect.</p></div><div ng-switch-when=\"FAILED\"><p>Oops, something has gone wrong! Check the console for more info.</p></div><div ng-switch-default><h2>Current Game: {{vm.state.gameName || \\'N/A\\'}}</h2><p class=\"lead\">Current Time: {{vm.state.timeString}}</p><div class=\"row\"><div class=\"col-md-1 broker broker-{{vm.state.brokers[$index].enabled ? \\'enabled\\' : \\'disabled\\'}}\" ng-click=\"vm.toggleBroker($index)\" ng-repeat=\"broker in vm.state.brokers\"><span style=\"color:{{vm.colors[$index % vm.colors.length]}};\" ng-bind-html=\"vm.symbolMap[vm.symbols[$index % vm.symbols.length]]\"></span><br><span>{{broker.name.replace(\\' \\', \\'&nbsp;\\')}}</span></div></div><div class=\"row\"><div class=\"col-md-12\"><h2>Money</h2><p class=\"lead\">Cumulative</p><highchart config=\"vm.graphs.allMoneyCumulative\" change-detection=\"vm.changeDetection[\\'allMoneyCumulative\\']\" class=\"col-md-12 highchart\"></highchart></div></div><div class=\"row\"><hr><div class=\"col-md-12\"><ul class=\"nav nav-pills\"><li role=\"presentation\" class=\"{{vm.tab === \\'retail\\' ? \\'active\\' : \\'\\'}}\"><a ng-click=\"vm.tab = \\'retail\\'\">Retail</a></li><li role=\"presentation\" class=\"{{vm.tab === \\'wholesale\\' ? \\'active\\' : \\'\\'}}\"><a ng-click=\"vm.tab = \\'wholesale\\'\">Wholesale</a></li></ul></div></div><div ng-show=\"vm.tab === \\'retail\\'\"><div class=\"row\"><div class=\"col-md-6\"><h2>Retail Money</h2><p class=\"lead\">Per time slot</p><highchart config=\"vm.graphs.retailMoney\" change-detection=\"vm.changeDetection[\\'retailMoney\\']\" class=\"col-md-12 highchart\"></highchart></div><div class=\"col-md-6\"><h2>Retail Money</h2><p class=\"lead\">Cumulative Money</p><highchart config=\"vm.graphs.retailMoneyCumulative\" change-detection=\"vm.changeDetection[\\'retailMoneyCumulative\\']\" class=\"col-md-12 highchart\"></highchart></div></div><div class=\"row\"><div class=\"col-md-6\"><h2>Retail Energy</h2><p class=\"lead\">Per time slot kWh</p><highchart config=\"vm.graphs.retailKwh\" change-detection=\"vm.changeDetection[\\'retailKwh\\']\" class=\"col-md-12 highchart\"></highchart></div><div class=\"col-md-6\"><h2>Retail Energy</h2><p class=\"lead\">Cumulative kWh</p><highchart config=\"vm.graphs.retailKwhCumulative\" change-detection=\"vm.changeDetection[\\'retailKwhCumulative\\']\" class=\"col-md-12 highchart\"></highchart></div></div><div class=\"row\"><div class=\"col-md-6\"><h2>Subscriptions</h2><p class=\"lead\">Per time slot</p><highchart config=\"vm.graphs.retailSubscription\" change-detection=\"vm.changeDetection[\\'retailSubscription\\']\" class=\"col-md-12 highchart\"></highchart></div><div class=\"col-md-6\"><h2>Subscriptions</h2><p class=\"lead\">Cumulative subscriptions</p><highchart config=\"vm.graphs.retailSubscriptionCumulative\" change-detection=\"vm.changeDetection[\\'retailSubscriptionCumulative\\']\" class=\"col-md-12 highchart\"></highchart></div></div></div><div ng-show=\"vm.tab === \\'wholesale\\'\"><div class=\"row\"><div class=\"col-md-6\"><h2>Wholesale Money</h2><p class=\"lead\">Per time slot</p><highchart config=\"vm.graphs.wholesaleMoney\" change-detection=\"vm.changeDetection[\\'wholesaleMoney\\']\" class=\"col-md-12 highchart\"></highchart></div><div class=\"col-md-6\"><h2>Wholesale Money</h2><p class=\"lead\">Cumulative Money</p><highchart config=\"vm.graphs.wholesaleMoneyCumulative\" change-detection=\"vm.changeDetection[\\'wholesaleMoneyCumulative\\']\" class=\"col-md-12 highchart\"></highchart></div></div><div class=\"row\"><div class=\"col-md-6\"><h2>Wholesale Energy</h2><p class=\"lead\">Per time slot MWh</p><highchart config=\"vm.graphs.wholesaleMwh\" change-detection=\"vm.changeDetection[\\'wholesaleMwh\\']\" class=\"col-md-12 highchart\"></highchart></div><div class=\"col-md-6\"><h2>Wholesale Energy</h2><p class=\"lead\">Cumulative MWh</p><highchart config=\"vm.graphs.wholesaleMwhCumulative\" change-detection=\"vm.changeDetection[\\'wholesaleMwhCumulative\\']\" class=\"col-md-12 highchart\"></highchart></div></div><div class=\"row\"><div class=\"col-md-6\"><h2>Wholesale Mean Buying Price</h2><p class=\"lead\">Per MWh</p><highchart config=\"vm.graphs.wholesalePriceBuy\" change-detection=\"vm.changeDetection[\\'wholesalePriceBuy\\']\" class=\"col-md-12 highchart\"></highchart></div><div class=\"col-md-6\"><h2>Wholesale Mean Selling Price</h2><p class=\"lead\">Per MWh</p><highchart config=\"vm.graphs.wholesalePriceSell\" change-detection=\"vm.changeDetection[\\'wholesalePriceSell\\']\" class=\"col-md-12 highchart\"></highchart></div></div><div class=\"row\"><div class=\"col-md-12\"><h2>Wholesale Mean Overall Price</h2><p class=\"lead\">Per MWh</p><highchart config=\"vm.graphs.wholesalePrice\" change-detection=\"vm.changeDetection[\\'wholesalePrice\\']\" class=\"col-md-12 highchart\"></highchart></div></div></div></div></div><br><jhi-alert></jhi-alert></div>');\n$templateCache.put('app/home/home.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"powerman img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Welcome!</h1><p class=\"lead\">This is the new PowerTAC Visualizer</p><div ng-switch=\"vm.isAuthenticated()\"><div class=\"alert alert-success\" ng-switch-when=\"true\">You are logged in as user \"{{vm.account.login}}\".</div></div><p>For more information about the project:</p><ul><li><a href=\"http://powertac.org/\" target=\"_blank\">PowerTAC home page</a></li><li><a href=\"https://groups.google.com/g/power-tac-support\" target=\"_blank\">Developers Google Forum</a></li></ul></div></div></div>');\n$templateCache.put('app/account/activate/activate.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Activation</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Your user has been activated.</strong> Please <a class=\"alert-link\" href=\"\" ng-click=\"vm.login()\">sign in</a>.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>');\n$templateCache.put('app/account/password/password.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>Password for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Password changed!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.changePassword()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label> <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label> <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/account/register/register.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h1>Registration</h1><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Registration saved!</strong> You can now log in with this account.</div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>Registration failed!</strong> Please try again later.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorUserExists\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.errorEmailExists\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\"alert alert-danger\" ng-show=\"vm.doNotMatch\">The password and its confirmation do not match!</div></div><div class=\"col-md-8 col-md-offset-2\"><form ng-show=\"!vm.success\" name=\"form\" role=\"form\" novalidate ng-submit=\"vm.register()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"login\">Username</label> <input type=\"text\" class=\"form-control\" id=\"login\" name=\"login\" placeholder=\"Your username\" ng-model=\"vm.registerAccount.login\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\" required><div ng-show=\"form.login.$dirty && form.login.$invalid\"><p class=\"help-block\" ng-show=\"form.login.$error.required\">Your username is required.</p><p class=\"help-block\" ng-show=\"form.login.$error.minlength\">Your username is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.login.$error.maxlength\">Your username cannot be longer than 50 characters.</p><p class=\"help-block\" ng-show=\"form.login.$error.pattern\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"password\">New password</label> <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"New password\" ng-model=\"vm.registerAccount.password\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.password.$dirty && form.password.$invalid\"><p class=\"help-block\" ng-show=\"form.password.$error.required\">Your password is required.</p><p class=\"help-block\" ng-show=\"form.password.$error.minlength\">Your password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.password.$error.maxlength\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\"vm.registerAccount.password\"></password-strength-bar></div><div class=\"form-group\"><label class=\"control-label\" for=\"confirmPassword\">New password confirmation</label> <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\" placeholder=\"Confirm the new password\" ng-model=\"vm.confirmPassword\" ng-minlength=\"4\" ng-maxlength=\"50\" required><div ng-show=\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\"><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.required\">Your confirmation password is required.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.minlength\">Your confirmation password is required to be at least 4 characters.</p><p class=\"help-block\" ng-show=\"form.confirmPassword.$error.maxlength\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Register</button></form></div></div></div>');\n$templateCache.put('app/account/sessions/sessions.html','<div><h2>Active sessions for [<b>{{vm.account.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Session invalidated!</strong></div><div class=\"alert alert-danger\" ng-show=\"vm.error\"><strong>An error has occured!</strong> The session could not be invalidated.</div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>IP Address</th><th>User agent</th><th>Date</th><th></th></tr></thead><tbody><tr ng-repeat=\"session in vm.sessions\"><td>{{session.ipAddress}}</td><td>{{session.userAgent}}</td><td>{{session.tokenDate | date:\\'longDate\\'}}</td><td><button type=\"submit\" class=\"btn btn-primary\" ng-click=\"vm.invalidate(session.series)\">Invalidate</button></td></tr></tbody></table></div></div>');\n$templateCache.put('app/account/settings/settings.html','<div><div class=\"row\"><div class=\"col-md-8 col-md-offset-2\"><h2>User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\"alert alert-success\" ng-show=\"vm.success\"><strong>Settings saved!</strong></div><jhi-alert-error></jhi-alert-error><form name=\"form\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"form-group\"><label class=\"control-label\" for=\"firstName\">First Name</label> <input type=\"text\" class=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"Your first name\" ng-model=\"vm.settingsAccount.firstName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.firstName.$dirty && form.firstName.$invalid\"><p class=\"help-block\" ng-show=\"form.firstName.$error.required\">Your first name is required.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.minlength\">Your first name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.firstName.$error.maxlength\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"lastName\">Last Name</label> <input type=\"text\" class=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"Your last name\" ng-model=\"vm.settingsAccount.lastName\" ng-minlength=\"1\" ng-maxlength=\"50\" required maxlength=\"50\"><div ng-show=\"form.lastName.$dirty && form.lastName.$invalid\"><p class=\"help-block\" ng-show=\"form.lastName.$error.required\">Your last name is required.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.minlength\">Your last name is required to be at least 1 character.</p><p class=\"help-block\" ng-show=\"form.lastName.$error.maxlength\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"email\">E-mail</label> <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"Your e-mail\" ng-model=\"vm.settingsAccount.email\" ng-minlength=\"5\" ng-maxlength=\"100\" required maxlength=\"100\"><div ng-show=\"form.email.$dirty && form.email.$invalid\"><p class=\"help-block\" ng-show=\"form.email.$error.required\">Your e-mail is required.</p><p class=\"help-block\" ng-show=\"form.email.$error.email\">Your e-mail is invalid.</p><p class=\"help-block\" ng-show=\"form.email.$error.minlength\">Your e-mail is required to be at least 5 characters.</p><p class=\"help-block\" ng-show=\"form.email.$error.maxlength\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\"submit\" ng-disabled=\"form.$invalid\" class=\"btn btn-primary\">Save</button></form></div></div></div>');\n$templateCache.put('app/admin/audits/audits.html','<div><h2>Audits</h2><div class=\"row\"><div class=\"col-md-5\"><h4>Filter by date</h4><p class=\"input-group\"><span class=\"input-group-addon\">from</span> <input type=\"date\" class=\"input-sm form-control\" name=\"start\" ng-model=\"vm.fromDate\" ng-change=\"vm.onChangeDate()\" required> <span class=\"input-group-addon\">to</span> <input type=\"date\" class=\"input-sm form-control\" name=\"end\" ng-model=\"vm.toDate\" ng-change=\"vm.onChangeDate()\" required></p></div></div><table class=\"table table-condensed table-striped table-bordered table-responsive\"><thead><tr><th ng-click=\"predicate = \\'timestamp\\'; reverse=!reverse\"><span>Date</span></th><th ng-click=\"predicate = \\'principal\\'; reverse=!reverse\"><span>User</span></th><th ng-click=\"predicate = \\'type\\'; reverse=!reverse\"><span>State</span></th><th ng-click=\"predicate = \\'data.message\\'; reverse=!reverse\"><span>Extra data</span></th></tr></thead><tr ng-repeat=\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\" ng-hide=\"audit.filtered\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\"audit.data.message\">{{audit.data.message}}</span> <span ng-show=\"audit.data.remoteAddress\"><span>Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\"text-center\"><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.loadPage(vm.page)\"></uib-pagination></div></div>');\n$templateCache.put('app/admin/configuration/configuration.html','<div><h2>Configuration</h2><span>Filter (by prefix)</span> <input type=\"text\" ng-model=\"filter\" class=\"form-control\"> <label ng-hide=\"filteredConfig.length == 0\">Spring configuration</label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filteredConfig.length == 0\"><thead><tr><th ng-click=\"predicate = \\'prefix\\'; reverse=!reverse\" class=\"col-sm-4\"><span>Prefix</span></th><th class=\"col-sm-8\">Properties</th></tr></thead><tr ng-repeat=\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\"><td><span>{{entry.prefix}}</span></td><td><div class=\"row\" ng-repeat=\"(key, value) in entry.properties\"><div class=\"col-md-4\">{{key}}</div><div class=\"col-md-8\"><span class=\"pull-right label label-default break\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\"(key, value) in vm.allConfiguration\"><label ng-hide=\"filtered.length == 0\"><span>{{key}}</span></label><table class=\"table table-condensed table-striped table-bordered table-responsive\" style=\"table-layout:fixed\" ng-hide=\"filtered.length == 0\"><thead><tr><th class=\"col-sm-4\">Property</th><th class=\"col-sm-8\">Value</th></tr></thead><tbody><tr ng-repeat=\"item in filtered = (value | filter:filter)\"><td class=\"break\">{{item.key}}</td><td class=\"break\"><span class=\"pull-right label label-default break\">{{item.val}}</span></td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/health/health.html','<div><h2>Health Checks</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><table id=\"healthCheck\" class=\"table table-striped\"><thead><tr><th class=\"col-md-7\">Service Name</th><th class=\"col-md-2 text-center\">Status</th><th class=\"col-md-2 text-center\">Details</th></tr></thead><tbody><tr ng-repeat=\"health in vm.healthData\"><td><span class=\"text-capitalize\">{{ vm.baseName(health.name) }}</span> {{vm.subSystemName(health.name)}}</td><td class=\"text-center\"><span class=\"label\" ng-class=\"vm.getLabelClass(health.status)\">{{ health.status }}</span></td><td class=\"text-center\"><a class=\"hand\" ng-click=\"vm.showHealth(health)\" ng-show=\"health.details || health.error\"><i class=\"glyphicon glyphicon-eye-open\"></i></a></td></tr></tbody></table></div>');\n$templateCache.put('app/admin/health/health.modal.html','<div class=\"modal-header\"><button aria-label=\"Close\" data-dismiss=\"modal\" class=\"close\" type=\"button\" ng-click=\"vm.cancel()\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\" id=\"showHealthLabel\"><span class=\"text-capitalize\">{{ vm.baseName(vm.currentHealth.name) }}</span> {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\"modal-body pad\"><div ng-show=\"vm.currentHealth.details\"><h4>Properties</h4><table class=\"table table-striped\"><thead><tr><th class=\"col-md-6 text-left\">Name</th><th class=\"col-md-6 text-left\">Value</th></tr></thead><tbody><tr ng-repeat=\"(k,v) in vm.currentHealth.details\"><td class=\"col-md-6 text-left\">{{k}}</td><td class=\"col-md-6 text-left\">{{v}}</td></tr></tbody></table></div><div ng-show=\"vm.currentHealth.error\"><h4>Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\"modal-footer\"><button data-dismiss=\"modal\" class=\"btn btn-default pull-left\" type=\"button\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/metrics/metrics.html','<div><h2>Application Metrics</h2><p><button type=\"button\" class=\"btn btn-primary\" ng-click=\"vm.refresh()\"><span class=\"glyphicon glyphicon-refresh\"></span>&nbsp;<span>Refresh</span></button></p><h3>JVM Metrics</h3><div class=\"row\" ng-hide=\"vm.updatingMetrics\"><div class=\"col-md-4\"><b>Memory</b><p><span>Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span>Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\" value=\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\"hand\" ng-click=\"vm.refreshThreadDumpData()\" data-toggle=\"modal\" data-target=\"#threadDump\"><i class=\"glyphicon glyphicon-eye-open\"></i></a><p><span>Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"warning\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span>Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\"0\" value=\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\" max=\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\"col-md-4\"><b>Garbage collections</b><div class=\"row\"><div class=\"col-md-9\">Mark Sweep count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Mark Sweep time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge count</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\"row\"><div class=\"col-md-9\">Scavenge time</div><div class=\"col-md-3 text-right\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\"well well-lg\" ng-show=\"vm.updatingMetrics\">Updating...</div><h3>HTTP requests (events per second)</h3><p><span>Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span>Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Code</th><th>Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\"><span>Average</span> (1 min)</th><th class=\"text-right\"><span>Average</span> (5 min)</th><th class=\"text-right\"><span>Average</span> (15 min)</th></tr></thead><tbody><tr><td>OK</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td>Not Found</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td>Server error</td><td><uib-progressbar min=\"0\" max=\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\" value=\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\"text-right\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3>Services statistics (time in millisecond)</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Service name</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.servicesStats\"><td>{{k}}</td><td class=\"text-right\">{{v.count}}</td><td class=\"text-right\">{{v.mean * 1000 | number:0}}</td><td class=\"text-right\">{{v.min * 1000 | number:0}}</td><td class=\"text-right\">{{v.p50 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p75 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p95 * 1000 | number:0}}</td><td class=\"text-right\">{{v.p99 * 1000 | number:0}}</td><td class=\"text-right\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3>Cache statistics</h3><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>Cache name</th><th class=\"text-right\">Cache Hits</th><th class=\"text-right\">Cache Misses</th><th class=\"text-right\">Cache Gets</th><th class=\"text-right\">Cache Puts</th><th class=\"text-right\">Cache Removals</th><th class=\"text-right\">Cache Evictions</th><th class=\"text-right\">Cache Hit %</th><th class=\"text-right\">Cache Miss %</th><th class=\"text-right\">Average get time (\\xB5s)</th><th class=\"text-right\">Average put time (\\xB5s)</th><th class=\"text-right\">Average remove time (\\xB5s)</th></tr></thead><tbody><tr ng-repeat=\"(k, v) in vm.cachesStats\" ng-once><td>{{v.name}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hits\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-misses\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-gets\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-puts\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-removals\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-evictions\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-hit-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.cache-miss-percentage\\'].value}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-get-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-put-time\\'].value | number:2}}</td><td class=\"text-right\">{{vm.metrics.gauges[k + \\'.average-remove-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\">DataSource statistics (time in millisecond)</h3><div class=\"table-responsive\" ng-show=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value > 0\"><table class=\"table table-striped\"><thead><tr><th><span>Usage</span> ({{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value}})</th><th class=\"text-right\">Count</th><th class=\"text-right\">Mean</th><th class=\"text-right\">Min</th><th class=\"text-right\">p50</th><th class=\"text-right\">p75</th><th class=\"text-right\">p95</th><th class=\"text-right\">p99</th><th class=\"text-right\">Max</th></tr></thead><tbody><tr><td><div class=\"progress progress-striped\"><uib-progressbar min=\"0\" max=\"vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value\" value=\"vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value\" class=\"progress-striped active\" type=\"success\"><span>{{vm.metrics.gauges[\\'HikariPool-1.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-1.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].count}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].mean | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].min | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p50 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p75 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p95 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].p99 | number:2}}</td><td class=\"text-right\">{{vm.metrics.histograms[\\'HikariPool-1.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/metrics/metrics.modal.html','<!-- Modal used to display the threads dump --><div class=\"modal-header\"><button type=\"button\" class=\"close\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Threads dump</h4></div><div class=\"modal-body pad\"><span class=\"label label-primary\" ng-click=\"threadDumpFilter = {}\">All&nbsp;<span class=\"badge\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\"label label-success\" ng-click=\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\">Runnable&nbsp;<span class=\"badge\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\"label label-info\" ng-click=\"threadDumpFilter = {threadState: \\'WAITING\\'}\">Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\"label label-warning\" ng-click=\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\">Timed Waiting&nbsp;<span class=\"badge\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\"label label-danger\" ng-click=\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\">Blocked&nbsp;<span class=\"badge\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\"voffset2\">&nbsp;</div>Filter <input type=\"text\" ng-model=\"threadDumpFilter\" class=\"form-control\"><div class=\"row pad\" ng-repeat=\"(k, v) in vm.threadDump | filter:threadDumpFilter\"><h5><span class=\"label\" ng-class=\"vm.getLabelClass(v.threadState)\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\"show = !show\"><span ng-show=\"!show\">Show StackTrace</span> <span ng-show=\"show\">Hide StackTrace</span></a></h5><div class=\"well\" ng-show=\"show\"><div ng-repeat=\"(stK, stV) in v.stackTrace\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\"voffset1\"></span></div></div><table class=\"table table-condensed\"><thead><tr><th class=\"text-right\">Blocked Time</th><th class=\"text-right\">Blocked Count</th><th class=\"text-right\">Waited Time</th><th class=\"text-right\">Waited Count</th><th>Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\" ng-click=\"vm.cancel()\">Done</button></div>');\n$templateCache.put('app/admin/tracker/tracker.html','<div><h2>Real-time user activities</h2><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr><th>User</th><th>IP Address</th><th>Current page</th><th>Time</th><th></th></tr></thead><tbody><tr ng-repeat=\"activity in vm.activities\"><td>{{activity.userLogin}}</td><td>{{activity.ipAddress}}</td><td>{{activity.page}}</td><td>{{activity.time}}</td></tr></tbody></table></div></div>');\n$templateCache.put('app/admin/user-management/user-management-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.user.login)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this User?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management-detail.html','<div><h2><span>User</span> [<b>{{vm.user.login}}</b>]</h2><dl class=\"row jh-entity-details\"><dt><span>Login</span></dt><dd><span>{{vm.user.login}}</span> <span class=\"label label-danger\" ng-show=\"!vm.user.activated\">Deactivated</span> <span class=\"label label-success\" ng-show=\"vm.user.activated\">Activated</span></dd><dt><span>First Name</span></dt><dd>{{vm.user.firstName}}</dd><dt><span>Last Name</span></dt><dd>{{vm.user.lastName}}</dd><dt><span>Created By</span></dt><dd>{{vm.user.createdBy}}</dd><dt><span>Created Date</span></dt><dd>{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}</dd><dt><span>Last Modified By</span></dt><dd>{{vm.user.lastModifiedBy}}</dd><dt><span>Last Modified Date</span></dt><dd>{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</dd><dt><span>Profiles</span></dt><dd><ul class=\"list-unstyled\"><li ng-repeat=\"authority in vm.user.authorities\"><span class=\"label label-info\">{{authority}}</span></li></ul></dd></dl><button type=\"submit\" ui-sref=\"user-management\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button></div>');\n$templateCache.put('app/admin/user-management/user-management-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myUserLabel\">Create or edit a User</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\"><label>ID</label> <input type=\"text\" class=\"form-control\" name=\"id\" ng-model=\"vm.user.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\">Login</label> <input type=\"text\" class=\"form-control\" name=\"login\" ng-model=\"vm.user.login\" ng-required=\"vm.user.id == null\" ng-minlength=\"1\" ng-maxlength=\"50\" ng-pattern=\"/^[_\\'.@A-Za-z0-9-]*$/\"><div ng-show=\"editForm.login.$invalid\"><p class=\"help-block\" ng-show=\"editForm.login.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.login.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\">First Name</label> <input type=\"text\" class=\"form-control\" name=\"firstName\" ng-model=\"vm.user.firstName\" ng-maxlength=\"50\"><div ng-show=\"editForm.firstName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.firstName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label>Last Name</label> <input type=\"text\" class=\"form-control\" name=\"lastName\" ng-model=\"vm.user.lastName\" ng-maxlength=\"50\"><div ng-show=\"editForm.lastName.$invalid\"><p class=\"help-block\" ng-show=\"editForm.lastName.$error.maxlength\">This field cannot be longer than 50 characters.</p></div></div><div class=\"form-group\"><label>Profiles</label> <select class=\"form-control\" multiple=\"multiple\" name=\"authority\" ng-model=\"vm.user.authorities\" ng-options=\"authority for authority in vm.authorities\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/admin/user-management/user-management.html','<div><h2>Users</h2><jhi-alert></jhi-alert><div class=\"row\"><div class=\"col-md-4\"><button class=\"btn btn-primary\" ui-sref=\"user-management.new\"><span class=\"glyphicon glyphicon-flash\"></span> <span>Create a new User</span></button></div></div><div class=\"table-responsive\"><table class=\"table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span><span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"login\"><span>Login</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th><span>Profiles</span></th><th jh-sort-by=\"createdDate\"><span>Created Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedBy\"><span>Last Modified By</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"lastModifiedDate\"><span>Last Modified Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"user in vm.users track by user.id\"><td><a ui-sref=\"user-management-detail({login:user.login})\">{{user.id}}</a></td><td>{{user.login}}</td><td><div ng-repeat=\"authority in user.authorities\"><span class=\"label label-info\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"user-management-detail({login:user.login})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.edit({login:user.login})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-xs hidden-sm\"></span></button> <button type=\"submit\" ui-sref=\"user-management.delete({login:user.login})\" class=\"btn btn-danger btn-sm\" ng-disabled=\"vm.currentAccount.login==user.login\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-xs hidden-sm\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/chart/chart-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.chart.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Chart?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/chart/chart-detail.html','<div><h2><span>Chart</span> {{vm.chart.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"row jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.chart.name}}</span></dd><dt><span>Shared</span></dt><dd><span>{{vm.chart.shared}}</span></dd><dt><span>Owner</span></dt><dd>{{vm.chart.owner.login}}</dd><dt><span>Graph</span></dt><dd><span ng-repeat=\"graph in vm.chart.graphs\"><a ui-sref=\"graph-detail({id: graph.id})\">{{graph.name}}</a>{{$last ? \\'\\' : \\', \\'}}</span></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"chart-detail.edit({id:vm.chart.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/chart/chart-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myChartLabel\">Create or edit a Chart</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.chart.id\"><label for=\"id\">ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.chart.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label> <input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.chart.name\" required ng-minlength=\"1\" ng-maxlength=\"255\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\">This field cannot be longer than 255 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_shared\">Shared</label> <input type=\"checkbox\" class=\"form-control\" name=\"shared\" id=\"field_shared\" ng-model=\"vm.chart.shared\"><div ng-show=\"editForm.shared.$invalid\"><p class=\"help-block\" ng-show=\"editForm.shared.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_owner\">Owner</label> <select class=\"form-control\" id=\"field_owner\" name=\"owner\" ng-model=\"vm.chart.owner\" ng-options=\"user as user.login for user in vm.users track by user.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_graph\">Graph</label> <select class=\"form-control\" id=\"field_graph\" multiple=\"multiple\" name=\"graph\" ng-model=\"vm.chart.graphs\" ng-options=\"graph as graph.name for graph in vm.graphs track by graph.id\"></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/chart/charts.html','<div><h2>Charts</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"chart.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Chart</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"shared\"><span>Shared</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"owner.login\"><span>Owner</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"chart in vm.charts track by chart.id\"><td><a ui-sref=\"chart-detail({id:chart.id})\">{{chart.id}}</a></td><td>{{chart.name}}</td><td>{{chart.shared}}</td><td>{{chart.owner.login}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"chart-detail({id:chart.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"chart.edit({id:chart.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"chart.delete({id:chart.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/file/file-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.file.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this File?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/file/file-detail.html','<div><h2><span>File</span> {{vm.file.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"row jh-entity-details\"><dt><span>Type</span></dt><dd><span>{{vm.file.type}}</span></dd><dt><span>Name</span></dt><dd><span>{{vm.file.name}}</span></dd><dt><span>Shared</span></dt><dd><span>{{vm.file.shared}}</span></dd><dt><span>Owner</span></dt><dd>{{vm.file.owner.login}}</dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"file-detail.edit({id:vm.file.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/file/file-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myFileLabel\">Create or edit a File</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.file.id\"><label for=\"id\">ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.file.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_type\">Type</label> <select class=\"form-control\" name=\"type\" ng-model=\"vm.file.type\" id=\"field_type\" required><option value=\"TRACE\">TRACE</option><option value=\"STATE\">STATE</option><option value=\"SEED\">SEED</option><option value=\"BOOT\">BOOT</option><option value=\"CONFIG\">CONFIG</option><option value=\"WEATHER\">WEATHER</option></select><div ng-show=\"editForm.type.$invalid\"><p class=\"help-block\" ng-show=\"editForm.type.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label> <input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.file.name\" required ng-minlength=\"1\" ng-maxlength=\"255\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\">This field cannot be longer than 255 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_shared\">Shared</label> <input type=\"checkbox\" class=\"form-control\" name=\"shared\" id=\"field_shared\" ng-model=\"vm.file.shared\"><div ng-show=\"editForm.shared.$invalid\"><p class=\"help-block\" ng-show=\"editForm.shared.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_owner\">Owner</label> <select class=\"form-control\" id=\"field_owner\" name=\"owner\" ng-model=\"vm.file.owner\" ng-options=\"user as user.login for user in vm.users track by user.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/file/files.html','<div><h2>Files</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"file.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new File</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"type\"><span>Type</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"shared\"><span>Shared</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"owner.login\"><span>Owner</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"file in vm.files track by file.id\"><td><a ui-sref=\"file-detail({id:file.id})\">{{file.id}}</a></td><td>{{file.type}}</td><td>{{file.name}}</td><td>{{file.shared}}</td><td>{{file.owner.login}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"file-detail({id:file.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"file.edit({id:file.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"file.delete({id:file.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/game/game-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.game.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Game?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/game/game-detail.html','<div><h2><span>Game</span> {{vm.game.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"row jh-entity-details\"><dt><span>Type</span></dt><dd><span>{{vm.game.type}}</span></dd><dt><span>Name</span></dt><dd><span>{{vm.game.name}}</span></dd><dt><span>Shared</span></dt><dd><span>{{vm.game.shared}}</span></dd><dt><span>Date</span></dt><dd><span>{{vm.game.date | date:\\'medium\\'}}</span></dd><dt><span>Brokers</span></dt><dd><span>{{vm.game.brokers}}</span></dd><dt><span>Owner</span></dt><dd>{{vm.game.owner.login}}</dd><dt><span>Trace File</span></dt><dd><a ui-sref=\"file-detail({id:vm.game.traceFile.id})\">{{vm.game.traceFile.id}}</a></dd><dt><span>State File</span></dt><dd><a ui-sref=\"file-detail({id:vm.game.stateFile.id})\">{{vm.game.stateFile.id}}</a></dd><dt><span>Seed File</span></dt><dd><a ui-sref=\"file-detail({id:vm.game.seedFile.id})\">{{vm.game.seedFile.id}}</a></dd><dt><span>Boot File</span></dt><dd><a ui-sref=\"file-detail({id:vm.game.bootFile.id})\">{{vm.game.bootFile.id}}</a></dd><dt><span>Config File</span></dt><dd><a ui-sref=\"file-detail({id:vm.game.configFile.id})\">{{vm.game.configFile.id}}</a></dd><dt><span>Weather File</span></dt><dd><a ui-sref=\"file-detail({id:vm.game.weatherFile.id})\">{{vm.game.weatherFile.id}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"game-detail.edit({id:vm.game.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/game/game-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myGameLabel\">Create or edit a Game</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.game.id\"><label for=\"id\">ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.game.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_type\">Type</label> <select class=\"form-control\" name=\"type\" ng-model=\"vm.game.type\" id=\"field_type\" required><option value=\"BOOT\">BOOT</option><option value=\"SIM\">SIM</option></select><div ng-show=\"editForm.type.$invalid\"><p class=\"help-block\" ng-show=\"editForm.type.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label> <input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.game.name\" required ng-minlength=\"1\" ng-maxlength=\"255\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\">This field cannot be longer than 255 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_shared\">Shared</label> <input type=\"checkbox\" class=\"form-control\" name=\"shared\" id=\"field_shared\" ng-model=\"vm.game.shared\"><div ng-show=\"editForm.shared.$invalid\"><p class=\"help-block\" ng-show=\"editForm.shared.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_date\">Date</label><div class=\"input-group\"><input id=\"field_date\" type=\"text\" class=\"form-control\" name=\"date\" datetime-picker=\"{{dateformat}}\" ng-model=\"vm.game.date\" is-open=\"vm.datePickerOpenStatus.date\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"vm.openCalendar(\\'date\\')\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_brokers\">Brokers</label> <input type=\"text\" class=\"form-control\" name=\"brokers\" id=\"field_brokers\" ng-model=\"vm.game.brokers\" ng-maxlength=\"4095\"><div ng-show=\"editForm.brokers.$invalid\"><p class=\"help-block\" ng-show=\"editForm.brokers.$error.maxlength\">This field cannot be longer than 4095 characters.</p></div></div><div class=\"form-group\"><label for=\"field_owner\">Owner</label> <select class=\"form-control\" id=\"field_owner\" name=\"owner\" ng-model=\"vm.game.owner\" ng-options=\"user as user.login for user in vm.users track by user.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_traceFile\">Trace File</label> <select class=\"form-control\" id=\"field_traceFile\" name=\"traceFile\" ng-model=\"vm.game.traceFile\" ng-options=\"file as file.id for file in vm.files track by file.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_stateFile\">State File</label> <select class=\"form-control\" id=\"field_stateFile\" name=\"stateFile\" ng-model=\"vm.game.stateFile\" ng-options=\"file as file.id for file in vm.files track by file.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_seedFile\">Seed File</label> <select class=\"form-control\" id=\"field_seedFile\" name=\"seedFile\" ng-model=\"vm.game.seedFile\" ng-options=\"file as file.id for file in vm.files track by file.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_bootFile\">Boot File</label> <select class=\"form-control\" id=\"field_bootFile\" name=\"bootFile\" ng-model=\"vm.game.bootFile\" ng-options=\"file as file.id for file in vm.files track by file.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_configFile\">Config File</label> <select class=\"form-control\" id=\"field_configFile\" name=\"configFile\" ng-model=\"vm.game.configFile\" ng-options=\"file as file.id for file in vm.files track by file.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_weatherFile\">Weather File</label> <select class=\"form-control\" id=\"field_weatherFile\" name=\"weatherFile\" ng-model=\"vm.game.weatherFile\" ng-options=\"file as file.id for file in vm.files track by file.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/game/games.html','<div><h2>Games</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"game.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Game</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"type\"><span>Type</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"shared\"><span>Shared</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"date\"><span>Date</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"brokers\"><span>Brokers</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"owner.login\"><span>Owner</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"traceFile.id\"><span>Trace File</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"stateFile.id\"><span>State File</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"seedFile.id\"><span>Seed File</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"bootFile.id\"><span>Boot File</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"configFile.id\"><span>Config File</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"weatherFile.id\"><span>Weather File</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"game in vm.games track by game.id\"><td><a ui-sref=\"game-detail({id:game.id})\">{{game.id}}</a></td><td>{{game.type}}</td><td>{{game.name}}</td><td>{{game.shared}}</td><td>{{game.date | date:\\'medium\\'}}</td><td>{{game.brokers}}</td><td>{{game.owner.login}}</td><td><a ui-sref=\"file-detail({id:game.traceFile.id})\">{{game.traceFile.id}}</a></td><td><a ui-sref=\"file-detail({id:game.stateFile.id})\">{{game.stateFile.id}}</a></td><td><a ui-sref=\"file-detail({id:game.seedFile.id})\">{{game.seedFile.id}}</a></td><td><a ui-sref=\"file-detail({id:game.bootFile.id})\">{{game.bootFile.id}}</a></td><td><a ui-sref=\"file-detail({id:game.configFile.id})\">{{game.configFile.id}}</a></td><td><a ui-sref=\"file-detail({id:game.weatherFile.id})\">{{game.weatherFile.id}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"game-detail({id:game.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"game.edit({id:game.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"game.delete({id:game.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/graph/graph-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.graph.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Graph?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/graph/graph-detail.html','<div><h2><span>Graph</span> {{vm.graph.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"row jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.graph.name}}</span></dd><dt><span>Type</span></dt><dd><span>{{vm.graph.type}}</span></dd><dt><span>Shared</span></dt><dd><span>{{vm.graph.shared}}</span></dd><dt><span>Owner</span></dt><dd>{{vm.graph.owner.login}}</dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"graph-detail.edit({id:vm.graph.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/graph/graph-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myGraphLabel\">Create or edit a Graph</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.graph.id\"><label for=\"id\">ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.graph.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label> <input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.graph.name\" required ng-minlength=\"1\" ng-maxlength=\"255\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\">This field cannot be longer than 255 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_type\">Type</label> <select class=\"form-control\" name=\"type\" ng-model=\"vm.graph.type\" id=\"field_type\" required><option value=\"LINE\">LINE</option><option value=\"BAR\">BAR</option></select><div ng-show=\"editForm.type.$invalid\"><p class=\"help-block\" ng-show=\"editForm.type.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_shared\">Shared</label> <input type=\"checkbox\" class=\"form-control\" name=\"shared\" id=\"field_shared\" ng-model=\"vm.graph.shared\"><div ng-show=\"editForm.shared.$invalid\"><p class=\"help-block\" ng-show=\"editForm.shared.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_owner\">Owner</label> <select class=\"form-control\" id=\"field_owner\" name=\"owner\" ng-model=\"vm.graph.owner\" ng-options=\"user as user.login for user in vm.users track by user.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/graph/graphs.html','<div><h2>Graphs</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"graph.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new Graph</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"type\"><span>Type</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"shared\"><span>Shared</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"owner.login\"><span>Owner</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"graph in vm.graphs track by graph.id\"><td><a ui-sref=\"graph-detail({id:graph.id})\">{{graph.id}}</a></td><td>{{graph.name}}</td><td>{{graph.type}}</td><td>{{graph.shared}}</td><td>{{graph.owner.login}}</td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"graph-detail({id:graph.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"graph.edit({id:graph.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"graph.delete({id:graph.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/entities/view/view-delete-dialog.html','<form name=\"deleteForm\" ng-submit=\"vm.confirmDelete(vm.view.id)\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\">Confirm delete operation</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this View?</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"deleteForm.$invalid\" class=\"btn btn-danger\"><span class=\"glyphicon glyphicon-remove-circle\"></span>&nbsp;<span>Delete</span></button></div></form>');\n$templateCache.put('app/entities/view/view-detail.html','<div><h2><span>View</span> {{vm.view.id}}</h2><hr><jhi-alert-error></jhi-alert-error><dl class=\"row jh-entity-details\"><dt><span>Name</span></dt><dd><span>{{vm.view.name}}</span></dd><dt><span>Graphs</span></dt><dd><span>{{vm.view.graphs}}</span></dd><dt><span>Shared</span></dt><dd><span>{{vm.view.shared}}</span></dd><dt><span>Owner</span></dt><dd>{{vm.view.owner.login}}</dd><dt><span>Chart</span></dt><dd><a ui-sref=\"chart-detail({id:vm.view.chart.id})\">{{vm.view.chart.name}}</a></dd></dl><button type=\"submit\" ui-sref=\"{{ vm.previousState }}\" class=\"btn btn-info\"><span class=\"glyphicon glyphicon-arrow-left\"></span>&nbsp;<span> Back</span></button> <button type=\"button\" ui-sref=\"view-detail.edit({id:vm.view.id})\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\">Edit</span></button></div>');\n$templateCache.put('app/entities/view/view-dialog.html','<form name=\"editForm\" role=\"form\" novalidate ng-submit=\"vm.save()\" show-validation><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.clear()\">&times;</button><h4 class=\"modal-title\" id=\"myViewLabel\">Create or edit a View</h4></div><div class=\"modal-body\"><jhi-alert-error></jhi-alert-error><div class=\"form-group\" ng-show=\"vm.view.id\"><label for=\"id\">ID</label> <input type=\"text\" class=\"form-control\" id=\"id\" name=\"id\" ng-model=\"vm.view.id\" readonly=\"readonly\"></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_name\">Name</label> <input type=\"text\" class=\"form-control\" name=\"name\" id=\"field_name\" ng-model=\"vm.view.name\" required ng-minlength=\"1\" ng-maxlength=\"255\"><div ng-show=\"editForm.name.$invalid\"><p class=\"help-block\" ng-show=\"editForm.name.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.name.$error.maxlength\">This field cannot be longer than 255 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_graphs\">Graphs</label> <input type=\"text\" class=\"form-control\" name=\"graphs\" id=\"field_graphs\" ng-model=\"vm.view.graphs\" required ng-minlength=\"1\" ng-maxlength=\"255\"><div ng-show=\"editForm.graphs.$invalid\"><p class=\"help-block\" ng-show=\"editForm.graphs.$error.required\">This field is required.</p><p class=\"help-block\" ng-show=\"editForm.graphs.$error.minlength\" translate-value-min=\"1\">This field is required to be at least 1 characters.</p><p class=\"help-block\" ng-show=\"editForm.graphs.$error.maxlength\">This field cannot be longer than 255 characters.</p></div></div><div class=\"form-group\"><label class=\"control-label\" for=\"field_shared\">Shared</label> <input type=\"checkbox\" class=\"form-control\" name=\"shared\" id=\"field_shared\" ng-model=\"vm.view.shared\"><div ng-show=\"editForm.shared.$invalid\"><p class=\"help-block\" ng-show=\"editForm.shared.$error.required\">This field is required.</p></div></div><div class=\"form-group\"><label for=\"field_owner\">Owner</label> <select class=\"form-control\" id=\"field_owner\" name=\"owner\" ng-model=\"vm.view.owner\" ng-options=\"user as user.login for user in vm.users track by user.id\"><option value=\"\"></option></select></div><div class=\"form-group\"><label for=\"field_chart\">Chart</label> <select class=\"form-control\" id=\"field_chart\" name=\"chart\" ng-model=\"vm.view.chart\" ng-options=\"chart as chart.name for chart in vm.charts track by chart.id\"><option value=\"\"></option></select></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" ng-click=\"vm.clear()\"><span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span>Cancel</span></button> <button type=\"submit\" ng-disabled=\"editForm.$invalid || vm.isSaving\" class=\"btn btn-primary\"><span class=\"glyphicon glyphicon-save\"></span>&nbsp;<span>Save</span></button></div></form>');\n$templateCache.put('app/entities/view/views.html','<div><h2>Views</h2><jhi-alert></jhi-alert><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-xs-4 no-padding-left\"><button class=\"btn btn-primary\" ui-sref=\"view.new\"><span class=\"glyphicon glyphicon-plus\"></span> <span>Create new View</span></button></div></div></div><br><div class=\"table-responsive\"><table class=\"jh-table table table-striped\"><thead><tr jh-sort=\"vm.predicate\" ascending=\"vm.reverse\" callback=\"vm.transition()\"><th jh-sort-by=\"id\"><span>ID</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"name\"><span>Name</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"graphs\"><span>Graphs</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"shared\"><span>Shared</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"owner.login\"><span>Owner</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th jh-sort-by=\"chart.name\"><span>Chart</span> <span class=\"glyphicon glyphicon-sort\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\"view in vm.views track by view.id\"><td><a ui-sref=\"view-detail({id:view.id})\">{{view.id}}</a></td><td>{{view.name}}</td><td>{{view.graphs}}</td><td>{{view.shared}}</td><td>{{view.owner.login}}</td><td><a ui-sref=\"chart-detail({id:view.chart.id})\">{{view.chart.name}}</a></td><td class=\"text-right\"><div class=\"btn-group flex-btn-group-container\"><button type=\"submit\" ui-sref=\"view-detail({id:view.id})\" class=\"btn btn-info btn-sm\"><span class=\"glyphicon glyphicon-eye-open\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"view.edit({id:view.id})\" class=\"btn btn-primary btn-sm\"><span class=\"glyphicon glyphicon-pencil\"></span> <span class=\"hidden-sm-down\"></span></button> <button type=\"submit\" ui-sref=\"view.delete({id:view.id})\" class=\"btn btn-danger btn-sm\"><span class=\"glyphicon glyphicon-remove-circle\"></span> <span class=\"hidden-sm-down\"></span></button></div></td></tr></tbody></table></div><div class=\"text-center\"><jhi-item-count page=\"vm.page\" total=\"vm.queryCount\" items-per-page=\"vm.itemsPerPage\"></jhi-item-count><uib-pagination class=\"pagination-sm\" total-items=\"vm.totalItems\" items-per-page=\"vm.itemsPerPage\" ng-model=\"vm.page\" ng-change=\"vm.transition()\"></uib-pagination></div></div>');\n$templateCache.put('app/components/login/login.html','<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" ng-click=\"vm.cancel()\">&times;</button><h4 class=\"modal-title\">Sign in</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4 col-md-offset-4\"><h1>Sign in</h1></div><div class=\"col-md-8 col-md-offset-2\"><div class=\"alert alert-danger\" ng-show=\"vm.authenticationError\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\"col-md-8 col-md-offset-2\"><form class=\"form\" role=\"form\" ng-submit=\"vm.login($event)\"><div class=\"form-group\"><label for=\"username\">Login</label> <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Your username\" ng-model=\"vm.username\"></div><div class=\"form-group\"><label for=\"password\">Password</label> <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Your password\" ng-model=\"vm.password\"></div><div class=\"form-group\"><label for=\"rememberMe\"><input type=\"hidden\" id=\"rememberMe\" ng-model=\"vm.rememberMe\" value=\"false\"><!--<span>Remember me</span>--></label></div><button type=\"submit\" class=\"btn btn-primary\">Sign in</button></form><p></p><div class=\"alert alert-warning\">You don\\'t have an account yet? <a class=\"alert-link\" href=\"\" ng-click=\"vm.register()\">Register a new account</a></div></div></div></div>');\n$templateCache.put('app/layouts/navbar/navbar.html','<nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"container\"><div class=\"navbar-header\"><button type=\"button\" class=\"navbar-toggle\" ng-click=\"vm.toggleNavbar()\"><span class=\"sr-only\">Toggle navigation</span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span></button> <a class=\"navbar-brand logo\" href=\"#/\" ng-click=\"vm.collapseNavbar()\"><span>Visualizer2</span> <span class=\"navbar-version\">v{{VERSION}}</span></a></div><div class=\"navbar-collapse\" uib-collapse=\"vm.isNavbarCollapsed\" ng-switch=\"vm.isAuthenticated()\"><ul class=\"nav navbar-nav navbar-right\"><li ui-sref-active=\"active\"><a ui-sref=\"home\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-home\"></span> <span class=\"hidden-sm\">Home</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"graphs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-stats\"></span> <span class=\"hidden-sm\">Graphs</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\" ng-show=\"{{CONFIG.mode!==\\'tournament\\'}}\"><a ui-sref=\"files\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-file\"></span> <span class=\"hidden-sm\">Files</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\" ng-show=\"{{CONFIG.mode!==\\'tournament\\'}}\"><a ui-sref=\"games\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-flag\"></span> <span class=\"hidden-sm\">Games</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\"{active: vm.$state.includes(\\'entity\\')}\" ng-switch-when=\"true\" ng-show=\"{{CONFIG.mode!==\\'tournament\\' && DEBUG_INFO_ENABLED}}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"entity-menu\"><span><span class=\"glyphicon glyphicon-th-list\"></span> <span class=\"hidden-sm\">Entities </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"file\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-file\"></span>&nbsp; <span>File</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"game\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-flag\"></span>&nbsp; <span>Game</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"graph\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-stats\"></span>&nbsp; <span>Graph</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"chart\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list\"></span>&nbsp; <span>Chart</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"view\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-picture\"></span>&nbsp; <span>View</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\"{active: vm.$state.includes(\\'admin\\')}\" ng-switch-when=\"true\" has-authority=\"ROLE_ADMIN\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"admin-menu\"><span><span class=\"glyphicon glyphicon-sunglasses\"></span> <span class=\"hidden-sm\">Administration</span> <b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\"><a ui-sref=\"user-management\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-user\"></span>&nbsp; <span>User management</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-tracker\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-eye-open\"></span>&nbsp; <span>User tracker</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-metrics\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-dashboard\"></span>&nbsp; <span>Metrics</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-health\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-heart\"></span>&nbsp; <span>Health</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"jhi-configuration\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-list-alt\"></span>&nbsp; <span>Configuration</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"audits\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-bell\"></span>&nbsp; <span>Audits</span></a></li><li ui-sref-active=\"active\"><a ui-sref=\"logs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-tasks\"></span>&nbsp; <span>Logs</span></a></li><li ng-show=\"vm.swaggerEnabled\" ui-sref-active=\"active\"><a ui-sref=\"docs\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-book\"></span>&nbsp; <span>API</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --><li ng-hide=\"vm.inProduction\"><a href=\"/h2-console\" target=\"_tab\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-hdd\"></span>&nbsp; <span>Database</span></a></li></ul></li><li ng-class=\"{active: vm.$state.includes(\\'account\\')}\" ng-show=\"{{CONFIG.mode!==\\'tournament\\'}}\" uib-dropdown class=\"dropdown pointer\"><a class=\"dropdown-toggle\" uib-dropdown-toggle href=\"\" id=\"account-menu\"><span><span class=\"glyphicon glyphicon-user\"></span> <span class=\"hidden-sm\">Account </span><b class=\"caret\"></b></span></a><ul class=\"dropdown-menu\" uib-dropdown-menu><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"settings\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-wrench\"></span>&nbsp; <span>Settings</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"password\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-lock\"></span>&nbsp; <span>Password</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a ui-sref=\"sessions\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-cloud\"></span>&nbsp; <span>Sessions</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"true\"><a href=\"\" ng-click=\"vm.logout()\" id=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>&nbsp; <span>Sign out</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a href=\"\" ng-click=\"vm.login()\" id=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>&nbsp; <span>Sign in</span></a></li><li ui-sref-active=\"active\" ng-switch-when=\"false\"><a ui-sref=\"register\" ng-click=\"vm.collapseNavbar()\"><span class=\"glyphicon glyphicon-plus-sign\"></span>&nbsp; <span>Register</span></a></li></ul></li></ul></div></div></nav>');\n$templateCache.put('app/layouts/error/accessdenied.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div class=\"alert alert-danger\">You are not authorized to access the page.</div></div></div></div>');\n$templateCache.put('app/layouts/error/error.html','<div ng-cloak><div class=\"row\"><div class=\"col-md-4\"><span class=\"hipster img-responsive img-rounded\"></span></div><div class=\"col-md-8\"><h1>Error Page!</h1><div ng-show=\"errorMessage\"><div class=\"alert alert-danger\">{{errorMessage}}</div></div></div></div></div>');}]);})();"]}